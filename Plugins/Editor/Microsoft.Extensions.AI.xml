<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Extensions.AI</name>
    </assembly>
    <members>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>Specifies that null is allowed as an input even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>Specifies that null is disallowed as an input even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>Specifies that an output may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>Specifies that an output will not be null even if the corresponding type allows it. Specifies that an input argument was not null when the call returns.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>, the parameter may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter may be <see langword="null" />.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>, the parameter will not be null even if the corresponding type allows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be <see langword="null" />.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>Specifies that the output will be non-null if the named parameter is non-null.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with the associated parameter name.</summary>
            <param name="parameterName">
            The associated parameter name.  The output will be non-null if the argument to the parameter specified is non-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>Gets the associated parameter name.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>Applied to a method that will never return under any circumstance.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>Specifies that the method will not return if the associated Boolean parameter is passed the specified value.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified parameter value.</summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable by diagnostics if the argument to
            the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>Gets the condition parameter value.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with a field or property member.</summary>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>Initializes the attribute with the list of field and property members.</summary>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values when returning with the specified return value condition.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>Initializes the attribute with the specified return value condition and a field or property member.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be <see langword="null" />.
            </param>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>Initializes the attribute with the specified return value condition and list of field and property members.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be <see langword="null" />.
            </param>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute">
             <summary>
             Indicates that certain members on a specified <see cref="T:System.Type"/> are accessed dynamically,
             for example through <see cref="N:System.Reflection"/>.
             </summary>
             <remarks>
             This allows tools to understand which members are being accessed during the execution
             of a program.
            
             This attribute is valid on members whose type is <see cref="T:System.Type"/> or <see cref="T:System.String"/>.
            
             When this attribute is applied to a location of type <see cref="T:System.String"/>, the assumption is
             that the string represents a fully qualified type name.
            
             When this attribute is applied to a class, interface, or struct, the members specified
             can be accessed dynamically on <see cref="T:System.Type"/> instances returned from calling
             <see cref="M:System.Object.GetType"/> on instances of that class, interface, or struct.
            
             If the attribute is applied to a method it's treated as a special case and it implies
             the attribute should be applied to the "this" parameter of the method. As such the attribute
             should only be used on instance methods of types assignable to System.Type (or string, but no methods
             will use it there).
             </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute.#ctor(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute"/> class
            with the specified member types.
            </summary>
            <param name="memberTypes">The types of members dynamically accessed.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute.MemberTypes">
            <summary>
            Gets the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes"/> which specifies the type
            of members dynamically accessed.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes">
             <summary>
             Specifies the types of members that are dynamically accessed.
            
             This enumeration has a <see cref="T:System.FlagsAttribute"/> attribute that allows a
             bitwise combination of its member values.
             </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.None">
            <summary>
            Specifies no members.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicParameterlessConstructor">
            <summary>
            Specifies the default, parameterless public constructor.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors">
            <summary>
            Specifies all public constructors.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicConstructors">
            <summary>
            Specifies all non-public constructors.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicMethods">
            <summary>
            Specifies all public methods.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicMethods">
            <summary>
            Specifies all non-public methods.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicFields">
            <summary>
            Specifies all public fields.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicFields">
            <summary>
            Specifies all non-public fields.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicNestedTypes">
            <summary>
            Specifies all public nested types.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicNestedTypes">
            <summary>
            Specifies all non-public nested types.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicProperties">
            <summary>
            Specifies all public properties.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicProperties">
            <summary>
            Specifies all non-public properties.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicEvents">
            <summary>
            Specifies all public events.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicEvents">
            <summary>
            Specifies all non-public events.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.Interfaces">
            <summary>
            Specifies all interfaces implemented by the type.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.All">
            <summary>
            Specifies all members.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute">
            <summary>
            States a dependency that one member has on another.
            </summary>
            <remarks>
            This can be used to inform tooling of a dependency that is otherwise not evident purely from
            metadata and IL, for example a member relied on via reflection.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute"/> class
            with the specified signature of a member on the same type as the consumer.
            </summary>
            <param name="memberSignature">The signature of the member depended on.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute"/> class
            with the specified signature of a member on a <see cref="T:System.Type"/>.
            </summary>
            <param name="memberSignature">The signature of the member depended on.</param>
            <param name="type">The <see cref="T:System.Type"/> containing <paramref name="memberSignature"/>.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute"/> class
            with the specified signature of a member on a type in an assembly.
            </summary>
            <param name="memberSignature">The signature of the member depended on.</param>
            <param name="typeName">The full name of the type containing the specified member.</param>
            <param name="assemblyName">The assembly name of the type containing the specified member.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute"/> class
            with the specified types of members on a <see cref="T:System.Type"/>.
            </summary>
            <param name="memberTypes">The types of members depended on.</param>
            <param name="type">The <see cref="T:System.Type"/> containing the specified members.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute"/> class
            with the specified types of members on a type in an assembly.
            </summary>
            <param name="memberTypes">The types of members depended on.</param>
            <param name="typeName">The full name of the type containing the specified members.</param>
            <param name="assemblyName">The assembly name of the type containing the specified members.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberSignature">
            <summary>
            Gets the signature of the member depended on.
            </summary>
            <remarks>
            Either <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberSignature"/> must be a valid string or <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberTypes"/>
            must not equal <see cref="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.None"/>, but not both.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberTypes">
            <summary>
            Gets the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes"/> which specifies the type
            of members depended on.
            </summary>
            <remarks>
            Either <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberSignature"/> must be a valid string or <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberTypes"/>
            must not equal <see cref="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.None"/>, but not both.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.Type">
            <summary>
            Gets the <see cref="T:System.Type"/> containing the specified member.
            </summary>
            <remarks>
            If neither <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.Type"/> nor <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.TypeName"/> are specified,
            the type of the consumer is assumed.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.TypeName">
            <summary>
            Gets the full name of the type containing the specified member.
            </summary>
            <remarks>
            If neither <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.Type"/> nor <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.TypeName"/> are specified,
            the type of the consumer is assumed.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.AssemblyName">
            <summary>
            Gets the assembly name of the specified type.
            </summary>
            <remarks>
            <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.AssemblyName"/> is only valid when <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.TypeName"/> is specified.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.Condition">
            <summary>
            Gets or sets the condition in which the dependency is applicable, e.g. "DEBUG".
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.RequiresAssemblyFilesAttribute">
            <summary>
            /// Indicates that the specified member requires assembly files to be on disk.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.RequiresAssemblyFilesAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.RequiresAssemblyFilesAttribute"/> class.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.RequiresAssemblyFilesAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.RequiresAssemblyFilesAttribute"/> class.
            </summary>
            <param name="message">
            A message that contains information about the need for assembly files to be on disk.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresAssemblyFilesAttribute.Message">
            <summary>
            Gets an optional message that contains information about the need for
            assembly files to be on disk.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresAssemblyFilesAttribute.Url">
            <summary>
            Gets or sets an optional URL that contains more information about the member,
            why it requires assembly files to be on disk, and what options a consumer has
            to deal with it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute">
            <summary>
            Indicates that the specified method requires the ability to generate new code at runtime,
            for example through <see cref="N:System.Reflection"/>.
            </summary>
            <remarks>
            This allows tools to understand which methods are unsafe to call when compiling ahead of time.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute"/> class
            with the specified message.
            </summary>
            <param name="message">
            A message that contains information about the usage of dynamic code.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute.Message">
            <summary>
            Gets a message that contains information about the usage of dynamic code.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute.Url">
            <summary>
            Gets or sets an optional URL that contains more information about the method,
            why it requires dynamic code, and what options a consumer has to deal with it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute">
            <summary>
            /// Indicates that the specified method requires dynamic access to code that is not referenced
            statically, for example through <see cref="N:System.Reflection"/>.
            </summary>
            <remarks>
            This allows tools to understand which methods are unsafe to call when removing unreferenced
            code from an application.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute"/> class
            with the specified message.
            </summary>
            <param name="message">
            A message that contains information about the usage of unreferenced code.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.Message">
            <summary>
            Gets a message that contains information about the usage of unreferenced code.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.Url">
            <summary>
            Gets or sets an optional URL that contains more information about the method,
            why it requires unreferenced code, and what options a consumer has to deal with it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute">
            <summary>
            /// Suppresses reporting of a specific rule violation, allowing multiple suppressions on a
            single code artifact.
            </summary>
            <remarks>
            <see cref="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute"/> is different than
            <see cref="T:System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"/> in that it doesn't have a
            <see cref="T:System.Diagnostics.ConditionalAttribute"/>. So it is always preserved in the compiled assembly.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute"/>
            class, specifying the category of the tool and the identifier for an analysis rule.
            </summary>
            <param name="category">The category for the attribute.</param>
            <param name="checkId">The identifier of the analysis rule the attribute applies to.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Category">
            <summary>
            Gets the category identifying the classification of the attribute.
            </summary>
            <remarks>
            The <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Category"/> property describes the tool or tool analysis category
            for which a message suppression attribute applies.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.CheckId">
            <summary>
            Gets the identifier of the analysis tool rule to be suppressed.
            </summary>
            <remarks>
            Concatenated together, the <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Category"/> and <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.CheckId"/>
            properties form a unique check identifier.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Scope">
            <summary>
            Gets or sets the scope of the code that is relevant for the attribute.
            </summary>
            <remarks>
            The Scope property is an optional argument that specifies the metadata scope for which
            the attribute is relevant.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Target">
            <summary>
            Gets or sets a fully qualified path that represents the target of the attribute.
            </summary>
            <remarks>
            The <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Target"/> property is an optional argument identifying the analysis target
            of the attribute. An example value is "System.IO.Stream.ctor():System.Void".
            Because it is fully qualified, it can be long, particularly for targets such as parameters.
            The analysis tool user interface should be capable of automatically formatting the parameter.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.MessageId">
            <summary>
            Gets or sets an optional argument expanding on exclusion criteria.
            </summary>
            <remarks>
            The <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.MessageId"/> property is an optional argument that specifies additional
            exclusion where the literal metadata target is not sufficiently precise. For example,
            the <see cref="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute"/> cannot be applied within a method,
            and it may be desirable to suppress a violation against a statement in the method that will
            give a rule violation, but not against all statements in the method.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Justification">
            <summary>
            Gets or sets the justification for suppressing the code analysis message.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute">
            <summary>Specifies the syntax used in a string.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String)">
            <summary>Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.</summary>
            <param name="syntax">The syntax identifier.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String,System.Object[])">
            <summary>Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.</summary>
            <param name="syntax">The syntax identifier.</param>
            <param name="arguments">Optional arguments associated with the specific syntax employed.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Syntax">
            <summary>Gets the identifier of the syntax used.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Arguments">
            <summary>Optional arguments associated with the specific syntax employed.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.CompositeFormat">
            <summary>The syntax identifier for strings containing composite formats for string formatting.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateOnlyFormat">
            <summary>The syntax identifier for strings containing date format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateTimeFormat">
            <summary>The syntax identifier for strings containing date and time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.EnumFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Enum"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.GuidFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Guid"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Json">
            <summary>The syntax identifier for strings containing JavaScript Object Notation (JSON).</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.NumericFormat">
            <summary>The syntax identifier for strings containing numeric format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Regex">
            <summary>The syntax identifier for strings containing regular expressions.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeOnlyFormat">
            <summary>The syntax identifier for strings containing time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeSpanFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.TimeSpan"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Uri">
            <summary>The syntax identifier for strings containing URIs.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Xml">
            <summary>The syntax identifier for strings containing XML.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute">
            <summary>
            Indicates that an API element is experimental and subject to change without notice.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute"/> class.
            </summary>
            <param name="diagnosticId">Human readable explanation for marking experimental API.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.DiagnosticId">
            <summary>
             Gets the ID that the compiler will use when reporting a use of the API the attribute applies to.
            </summary>
            <value>The unique diagnostic ID.</value>
            <remarks>
             The diagnostic ID is shown in build output for warnings and errors.
             <para>This property represents the unique ID that can be used to suppress the warnings or errors, if needed.</para>
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.UrlFormat">
            <summary>
             Gets or sets the URL for corresponding documentation.
             The API accepts a format string instead of an actual URL, creating a generic URL that includes the diagnostic ID.
            </summary>
            <value>The format string that represents a URL to corresponding documentation.</value>
            <remarks>An example format string is <c>https://contoso.com/obsoletion-warnings/{0}</c>.</remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute">
            <summary>
            Tags parameter that should be filled with specific caller name.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute"/> class.
            </summary>
            <param name="parameterName">Function parameter to take the name from.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.ParameterName">
            <summary>
            Gets name of the function parameter that name should be taken from.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.SkipLocalsInitAttribute">
            <summary>
            Used to indicate to the compiler that the <c>.locals init</c>
            flag should not be set in method headers.
            </summary>
            <remarks>
            This attribute is unsafe because it may reveal uninitialized memory to
            the application in certain instances (e.g., reading from uninitialized
            stackalloc'd memory). If applied to a method directly, the attribute
            applies to that method and all nested functions (lambdas, local
            functions) below it. If applied to a type or module, it applies to all
            methods nested inside. This attribute is intentionally not permitted on
            assemblies. Use at the module level instead to apply to multiple type
            declarations.
            </remarks>
        </member>
        <member name="T:Microsoft.Shared.Diagnostics.Throw">
            <summary>
            Defines static methods used to throw exceptions.
            </summary>
            <remarks>
            The main purpose is to reduce code size, improve performance, and standardize exception
            messages.
            </remarks>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfNull``1(``0,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> if the specified argument is <see langword="null"/>.
            </summary>
            <typeparam name="T">Argument type to be checked for <see langword="null"/>.</typeparam>
            <param name="argument">Object to be checked for <see langword="null"/>.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfNullOrMemberNull``2(``0,``1,System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> if the specified argument is <see langword="null"/>,
            or <see cref="T:System.ArgumentException" /> if the specified member is <see langword="null"/>.
            </summary>
            <typeparam name="TParameter">Argument type to be checked for <see langword="null"/>.</typeparam>
            <typeparam name="TMember">Member type to be checked for <see langword="null"/>.</typeparam>
            <param name="argument">Argument to be checked for <see langword="null"/>.</param>
            <param name="member">Object member to be checked for <see langword="null"/>.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <param name="memberName">The name of the member.</param>
            <returns>The original value of <paramref name="member"/>.</returns>
            <example>
            <code language="csharp">
            Throws.IfNullOrMemberNull(myObject, myObject?.MyProperty)
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfMemberNull``2(``0,``1,System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> if the specified member is <see langword="null"/>.
            </summary>
            <typeparam name="TParameter">Argument type.</typeparam>
            <typeparam name="TMember">Member type to be checked for <see langword="null"/>.</typeparam>
            <param name="argument">Argument to which member belongs.</param>
            <param name="member">Object member to be checked for <see langword="null"/>.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <param name="memberName">The name of the member.</param>
            <returns>The original value of <paramref name="member"/>.</returns>
            <example>
            <code language="csharp">
            Throws.IfMemberNull(myObject, myObject.MyProperty)
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfNullOrWhitespace(System.String,System.String)">
            <summary>
            Throws either an <see cref="T:System.ArgumentNullException"/> or an <see cref="T:System.ArgumentException"/>
            if the specified string is <see langword="null"/> or whitespace respectively.
            </summary>
            <param name="argument">String to be checked for <see langword="null"/> or whitespace.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfNullOrEmpty(System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> if the string is <see langword="null"/>,
            or <see cref="T:System.ArgumentException"/> if it is empty.
            </summary>
            <param name="argument">String to be checked for <see langword="null"/> or empty.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfBufferTooSmall(System.Int32,System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> if the argument's buffer size is less than the required buffer size.
            </summary>
            <param name="bufferSize">The actual buffer size.</param>
            <param name="requiredSize">The required buffer size.</param>
            <param name="paramName">The name of the parameter to be checked.</param>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfOutOfRange``1(``0,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the enum value is not valid.
            </summary>
            <param name="argument">The argument to evaluate.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <typeparam name="T">The type of the enumeration.</typeparam>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> if the collection is <see langword="null"/>,
            or <see cref="T:System.ArgumentException"/> if it is empty.
            </summary>
            <param name="argument">The collection to evaluate.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <typeparam name="T">The type of objects in the collection.</typeparam>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.ArgumentNullException(System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <param name="paramName">The name of the parameter that caused the exception.</param>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.ArgumentNullException(System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.ArgumentOutOfRangeException(System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/>.
            </summary>
            <param name="paramName">The name of the parameter that caused the exception.</param>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.ArgumentOutOfRangeException(System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/>.
            </summary>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.ArgumentOutOfRangeException(System.String,System.Object,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/>.
            </summary>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="actualValue">The value of the argument that caused this exception.</param>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.ArgumentException(System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/>.
            </summary>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.ArgumentException(System.String,System.String,System.Exception)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/>.
            </summary>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
            <remarks>
            If the <paramref name="innerException"/> is not a <see langword="null"/>, the current exception is raised in a catch
            block that handles the inner exception.
            </remarks>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.InvalidOperationException(System.String)">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.InvalidOperationException(System.String,System.Exception)">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <param name="message">A message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfLessThan(System.Int32,System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/>  if the specified number is less than min.
            </summary>
            <param name="argument">Number to be expected being less than min.</param>
            <param name="min">The number that must be less than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfGreaterThan(System.Int32,System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is greater than max.
            </summary>
            <param name="argument">Number to be expected being greater than max.</param>
            <param name="max">The number that must be greater than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfLessThanOrEqual(System.Int32,System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is less or equal than min.
            </summary>
            <param name="argument">Number to be expected being less or equal than min.</param>
            <param name="min">The number that must be less or equal than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfGreaterThanOrEqual(System.Int32,System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is greater or equal than max.
            </summary>
            <param name="argument">Number to be expected being greater or equal than max.</param>
            <param name="max">The number that must be greater or equal than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfOutOfRange(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is not in the specified range.
            </summary>
            <param name="argument">Number to be expected being greater or equal than max.</param>
            <param name="min">The lower bound of the allowed range of argument values.</param>
            <param name="max">The upper bound of the allowed range of argument values.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfZero(System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is equal to 0.
            </summary>
            <param name="argument">Number to be expected being not equal to zero.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfLessThan(System.UInt32,System.UInt32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/>  if the specified number is less than min.
            </summary>
            <param name="argument">Number to be expected being less than min.</param>
            <param name="min">The number that must be less than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfGreaterThan(System.UInt32,System.UInt32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is greater than max.
            </summary>
            <param name="argument">Number to be expected being greater than max.</param>
            <param name="max">The number that must be greater than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfLessThanOrEqual(System.UInt32,System.UInt32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is less or equal than min.
            </summary>
            <param name="argument">Number to be expected being less or equal than min.</param>
            <param name="min">The number that must be less or equal than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfGreaterThanOrEqual(System.UInt32,System.UInt32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is greater or equal than max.
            </summary>
            <param name="argument">Number to be expected being greater or equal than max.</param>
            <param name="max">The number that must be greater or equal than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfOutOfRange(System.UInt32,System.UInt32,System.UInt32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is not in the specified range.
            </summary>
            <param name="argument">Number to be expected being greater or equal than max.</param>
            <param name="min">The lower bound of the allowed range of argument values.</param>
            <param name="max">The upper bound of the allowed range of argument values.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfZero(System.UInt32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is equal to 0.
            </summary>
            <param name="argument">Number to be expected being not equal to zero.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfLessThan(System.Int64,System.Int64,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/>  if the specified number is less than min.
            </summary>
            <param name="argument">Number to be expected being less than min.</param>
            <param name="min">The number that must be less than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfGreaterThan(System.Int64,System.Int64,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is greater than max.
            </summary>
            <param name="argument">Number to be expected being greater than max.</param>
            <param name="max">The number that must be greater than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfLessThanOrEqual(System.Int64,System.Int64,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is less or equal than min.
            </summary>
            <param name="argument">Number to be expected being less or equal than min.</param>
            <param name="min">The number that must be less or equal than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfGreaterThanOrEqual(System.Int64,System.Int64,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is greater or equal than max.
            </summary>
            <param name="argument">Number to be expected being greater or equal than max.</param>
            <param name="max">The number that must be greater or equal than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfOutOfRange(System.Int64,System.Int64,System.Int64,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is not in the specified range.
            </summary>
            <param name="argument">Number to be expected being greater or equal than max.</param>
            <param name="min">The lower bound of the allowed range of argument values.</param>
            <param name="max">The upper bound of the allowed range of argument values.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfZero(System.Int64,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is equal to 0.
            </summary>
            <param name="argument">Number to be expected being not equal to zero.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfLessThan(System.UInt64,System.UInt64,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/>  if the specified number is less than min.
            </summary>
            <param name="argument">Number to be expected being less than min.</param>
            <param name="min">The number that must be less than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfGreaterThan(System.UInt64,System.UInt64,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is greater than max.
            </summary>
            <param name="argument">Number to be expected being greater than max.</param>
            <param name="max">The number that must be greater than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfLessThanOrEqual(System.UInt64,System.UInt64,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is less or equal than min.
            </summary>
            <param name="argument">Number to be expected being less or equal than min.</param>
            <param name="min">The number that must be less or equal than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfGreaterThanOrEqual(System.UInt64,System.UInt64,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is greater or equal than max.
            </summary>
            <param name="argument">Number to be expected being greater or equal than max.</param>
            <param name="max">The number that must be greater or equal than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfOutOfRange(System.UInt64,System.UInt64,System.UInt64,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is not in the specified range.
            </summary>
            <param name="argument">Number to be expected being greater or equal than max.</param>
            <param name="min">The lower bound of the allowed range of argument values.</param>
            <param name="max">The upper bound of the allowed range of argument values.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfZero(System.UInt64,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is equal to 0.
            </summary>
            <param name="argument">Number to be expected being not equal to zero.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfLessThan(System.Double,System.Double,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is less than min.
            </summary>
            <param name="argument">Number to be expected being less than min.</param>
            <param name="min">The number that must be less than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfGreaterThan(System.Double,System.Double,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is greater than max.
            </summary>
            <param name="argument">Number to be expected being greater than max.</param>
            <param name="max">The number that must be greater than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfLessThanOrEqual(System.Double,System.Double,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is less or equal than min.
            </summary>
            <param name="argument">Number to be expected being less or equal than min.</param>
            <param name="min">The number that must be less or equal than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfGreaterThanOrEqual(System.Double,System.Double,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is greater or equal than max.
            </summary>
            <param name="argument">Number to be expected being greater or equal than max.</param>
            <param name="max">The number that must be greater or equal than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfOutOfRange(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is not in the specified range.
            </summary>
            <param name="argument">Number to be expected being greater or equal than max.</param>
            <param name="min">The lower bound of the allowed range of argument values.</param>
            <param name="max">The upper bound of the allowed range of argument values.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.Shared.Diagnostics.Throw.IfZero(System.Double,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is equal to 0.
            </summary>
            <param name="argument">Number to be expected being not equal to zero.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="T:Microsoft.Shared.Collections.Empty">
            <summary>
            Defines static methods used to optimize the use of empty collections.
            </summary>
        </member>
        <member name="M:Microsoft.Shared.Collections.Empty.ReadOnlyCollection``1">
            <summary>
            Returns an optimized empty collection.
            </summary>
            <typeparam name="T">The type of the collection.</typeparam>
            <returns>Returns an efficient static instance of an empty collection.</returns>
        </member>
        <member name="M:Microsoft.Shared.Collections.Empty.Enumerable``1">
            <summary>
            Returns an optimized empty collection.
            </summary>
            <typeparam name="T">The type of the collection.</typeparam>
            <returns>Returns an efficient static instance of an empty collection.</returns>
        </member>
        <member name="M:Microsoft.Shared.Collections.Empty.ReadOnlyList``1">
            <summary>
            Returns an optimized empty collection.
            </summary>
            <typeparam name="T">The type of the collection.</typeparam>
            <returns>Returns an efficient static instance of an empty list.</returns>
        </member>
        <member name="M:Microsoft.Shared.Collections.Empty.ReadOnlyDictionary``2">
            <summary>
            Returns an optimized empty dictionary.
            </summary>
            <typeparam name="TKey">The key type of the dictionary.</typeparam>
            <typeparam name="TValue">The value type of the dictionary.</typeparam>
            <returns>Returns an efficient static instance of an empty dictionary.</returns>
        </member>
        <member name="T:Microsoft.Shared.Collections.EmptyCollectionExtensions">
            <summary>
            Defines static methods used to optimize the use of empty collections.
            </summary>
        </member>
        <member name="M:Microsoft.Shared.Collections.EmptyCollectionExtensions.EmptyIfNull``1(System.Collections.Generic.IReadOnlyCollection{``0})">
            <summary>
            Returns an optimized empty collection if the input is <see langword="null"/> or empty, otherwise returns the input.
            </summary>
            <typeparam name="T">The type of the collection.</typeparam>
            <param name="collection">The collection to check for <see langword="null"/> or empty.</param>
            <returns>Returns a static instance of an empty type if the input collection is <see langword="null"/> or empty, otherwise the collection.</returns>
            <remarks>
            Substituting a static collection whenever an empty collection is needed helps in two ways. First,
            it allows the original empty collection to be garbage collected, freeing memory. Second, the
            empty collection that is returned is optimized to not allocated memory whenever the collection is
            enumerated.
            </remarks>
        </member>
        <member name="M:Microsoft.Shared.Collections.EmptyCollectionExtensions.EmptyIfNull``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Returns an optimized empty collection if the input is <see langword="null"/> or empty, otherwise returns the input.
            </summary>
            <typeparam name="T">The type of the collection.</typeparam>
            <param name="collection">The collection to check for <see langword="null"/> or empty.</param>
            <returns>Returns a static instance of an empty type if the input collection is <see langword="null"/> or empty, otherwise the collection.</returns>
            <remarks>
            Substituting a static collection whenever an empty collection is needed helps in two ways. First,
            it allows the original empty collection to be garbage collected, freeing memory. Second, the
            empty collection that is returned is optimized to not allocated memory whenever the collection is
            enumerated.
            </remarks>
        </member>
        <member name="M:Microsoft.Shared.Collections.EmptyCollectionExtensions.EmptyIfNull``1(System.Collections.Generic.IReadOnlyList{``0})">
            <summary>
            Returns an optimized empty collection if the input is <see langword="null"/> or empty, otherwise returns the input.
            </summary>
            <typeparam name="T">The type of the collection.</typeparam>
            <param name="list">The collection to check for <see langword="null"/> or empty.</param>
            <returns>Returns a static instance of an empty type if the input collection is <see langword="null"/> or empty, otherwise the collection.</returns>
            <remarks>
            Substituting a static collection whenever an empty collection is needed helps in two ways. First,
            it allows the original empty collection to be garbage collected, freeing memory. Second, the
            empty collection that is returned is optimized to not allocated memory whenever the collection is
            enumerated.
            </remarks>
        </member>
        <member name="M:Microsoft.Shared.Collections.EmptyCollectionExtensions.EmptyIfNull``1(System.Collections.Generic.IList{``0})">
            <summary>
            Returns an optimized empty list if the input is <see langword="null"/> or empty, otherwise returns the input.
            </summary>
            <typeparam name="T">The type of the collection.</typeparam>
            <param name="list">The list to check for <see langword="null"/> or empty.</param>
            <returns>Returns a static instance of an empty type if the input collection is <see langword="null"/> or empty, otherwise the collection.</returns>
            <remarks>
            Substituting a static list whenever an empty collection is needed helps in two ways. First,
            it allows the original empty collection to be garbage collected, freeing memory. Second, the
            empty collection that is returned is optimized to not allocated memory whenever the collection is
            enumerated.
            </remarks>
        </member>
        <member name="M:Microsoft.Shared.Collections.EmptyCollectionExtensions.EmptyIfNull``1(``0[])">
            <summary>
            Returns an optimized empty array if the input is <see langword="null"/> or empty, otherwise returns the input.
            </summary>
            <typeparam name="T">The type of the array.</typeparam>
            <param name="array">The array to check for <see langword="null"/> or empty.</param>
            <returns>Returns a static instance of an empty array if the input array is <see langword="null"/> or empty, otherwise the array.</returns>
        </member>
        <member name="M:Microsoft.Shared.Collections.EmptyCollectionExtensions.EmptyIfNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns an optimized empty collection if the input is <see langword="null"/> or can be determined to be empty, otherwise returns the input.
            </summary>
            <typeparam name="T">The type of the collection.</typeparam>
            <param name="enumerable">The collection to check for <see langword="null"/> or empty.</param>
            <returns>Returns a static instance of an empty type if the input collection is <see langword="null"/> or empty, otherwise the collection.</returns>
            <remarks>
            This method does not enumerate the collection.
            </remarks>
        </member>
        <member name="M:Microsoft.Shared.Collections.EmptyCollectionExtensions.EmptyIfNull``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1})">
            <summary>
            Returns an optimized empty dictionary if the input is <see langword="null"/> or can be determined to be empty, otherwise returns the input.
            </summary>
            <typeparam name="TKey">The key type of the dictionary.</typeparam>
            <typeparam name="TValue">The value type of the dictionary.</typeparam>
            <param name="dictionary">The dictionary to check for <see langword="null"/> or empty.</param>
            <returns>Returns a static instance of an empty type if the input dictionary is <see langword="null"/> or empty, otherwise the dictionary.</returns>
            <remarks>
            Note that this method does not enumerate the dictionary.
            </remarks>
        </member>
        <member name="T:Microsoft.Extensions.AI.AnonymousDelegatingChatClient">
            <summary>Represents a delegating chat client that wraps an inner client with implementations provided by delegates.</summary>
        </member>
        <member name="F:Microsoft.Extensions.AI.AnonymousDelegatingChatClient._getResponseFunc">
            <summary>The delegate to use as the implementation of <see cref="M:Microsoft.Extensions.AI.AnonymousDelegatingChatClient.GetResponseAsync(System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatOptions,System.Threading.CancellationToken)"/>.</summary>
        </member>
        <member name="F:Microsoft.Extensions.AI.AnonymousDelegatingChatClient._getStreamingResponseFunc">
            <summary>The delegate to use as the implementation of <see cref="M:Microsoft.Extensions.AI.AnonymousDelegatingChatClient.GetStreamingResponseAsync(System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatOptions,System.Threading.CancellationToken)"/>.</summary>
            <remarks>
            When non-<see langword="null"/>, this delegate is used as the implementation of <see cref="M:Microsoft.Extensions.AI.AnonymousDelegatingChatClient.GetStreamingResponseAsync(System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatOptions,System.Threading.CancellationToken)"/> and
            will be invoked with the same arguments as the method itself, along with a reference to the inner client.
            When <see langword="null"/>, <see cref="M:Microsoft.Extensions.AI.AnonymousDelegatingChatClient.GetStreamingResponseAsync(System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatOptions,System.Threading.CancellationToken)"/> will delegate directly to the inner client.
            </remarks>
        </member>
        <member name="F:Microsoft.Extensions.AI.AnonymousDelegatingChatClient._sharedFunc">
            <summary>The delegate to use as the implementation of both <see cref="M:Microsoft.Extensions.AI.AnonymousDelegatingChatClient.GetResponseAsync(System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatOptions,System.Threading.CancellationToken)"/> and <see cref="M:Microsoft.Extensions.AI.AnonymousDelegatingChatClient.GetStreamingResponseAsync(System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatOptions,System.Threading.CancellationToken)"/>.</summary>
        </member>
        <member name="M:Microsoft.Extensions.AI.AnonymousDelegatingChatClient.#ctor(Microsoft.Extensions.AI.IChatClient,System.Func{System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatOptions,System.Func{System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatOptions,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.AI.AnonymousDelegatingChatClient"/> class.
            </summary>
            <param name="innerClient">The inner client.</param>
            <param name="sharedFunc">
            A delegate that provides the implementation for both <see cref="M:Microsoft.Extensions.AI.AnonymousDelegatingChatClient.GetResponseAsync(System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatOptions,System.Threading.CancellationToken)"/> and <see cref="M:Microsoft.Extensions.AI.AnonymousDelegatingChatClient.GetStreamingResponseAsync(System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatOptions,System.Threading.CancellationToken)"/>.
            In addition to the arguments for the operation, it's provided with a delegate to the inner client that should be
            used to perform the operation on the inner client. It will handle both the non-streaming and streaming cases.
            </param>
            <remarks>
            This overload may be used when the anonymous implementation needs to provide pre-processing and/or post-processing, but doesn't
            need to interact with the results of the operation, which will come from the inner client.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="innerClient"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="sharedFunc"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Extensions.AI.AnonymousDelegatingChatClient.#ctor(Microsoft.Extensions.AI.IChatClient,System.Func{System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatOptions,Microsoft.Extensions.AI.IChatClient,System.Threading.CancellationToken,System.Threading.Tasks.Task{Microsoft.Extensions.AI.ChatResponse}},System.Func{System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatOptions,Microsoft.Extensions.AI.IChatClient,System.Threading.CancellationToken,System.Collections.Generic.IAsyncEnumerable{Microsoft.Extensions.AI.ChatResponseUpdate}})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.AI.AnonymousDelegatingChatClient"/> class.
            </summary>
            <param name="innerClient">The inner client.</param>
            <param name="getResponseFunc">
            A delegate that provides the implementation for <see cref="M:Microsoft.Extensions.AI.AnonymousDelegatingChatClient.GetResponseAsync(System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatOptions,System.Threading.CancellationToken)"/>. When <see langword="null"/>,
            <paramref name="getStreamingResponseFunc"/> must be non-null, and the implementation of <see cref="M:Microsoft.Extensions.AI.AnonymousDelegatingChatClient.GetResponseAsync(System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatOptions,System.Threading.CancellationToken)"/>
            will use <paramref name="getStreamingResponseFunc"/> for the implementation.
            </param>
            <param name="getStreamingResponseFunc">
            A delegate that provides the implementation for <see cref="M:Microsoft.Extensions.AI.AnonymousDelegatingChatClient.GetStreamingResponseAsync(System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatOptions,System.Threading.CancellationToken)"/>. When <see langword="null"/>,
            <paramref name="getResponseFunc"/> must be non-null, and the implementation of <see cref="M:Microsoft.Extensions.AI.AnonymousDelegatingChatClient.GetStreamingResponseAsync(System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatOptions,System.Threading.CancellationToken)"/>
            will use <paramref name="getResponseFunc"/> for the implementation.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="innerClient"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">Both <paramref name="getResponseFunc"/> and <paramref name="getStreamingResponseFunc"/> are <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Extensions.AI.AnonymousDelegatingChatClient.GetResponseAsync(System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Extensions.AI.AnonymousDelegatingChatClient.GetStreamingResponseAsync(System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Extensions.AI.AnonymousDelegatingChatClient.ThrowIfBothDelegatesNull(System.Object,System.Object)">
            <summary>Throws an exception if both of the specified delegates are <see langword="null"/>.</summary>
            <exception cref="T:System.ArgumentNullException">Both <paramref name="getResponseFunc"/> and <paramref name="getStreamingResponseFunc"/> are <see langword="null"/>.</exception>
        </member>
        <member name="T:Microsoft.Extensions.AI.CachingChatClient">
            <summary>
            Represents a delegating chat client that caches the results of chat calls.
            </summary>
        </member>
        <member name="F:Microsoft.Extensions.AI.CachingChatClient._boxedTrue">
            <summary>A boxed <see langword="true"/> value.</summary>
        </member>
        <member name="F:Microsoft.Extensions.AI.CachingChatClient._boxedFalse">
            <summary>A boxed <see langword="false"/> value.</summary>
        </member>
        <member name="M:Microsoft.Extensions.AI.CachingChatClient.#ctor(Microsoft.Extensions.AI.IChatClient)">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.Extensions.AI.CachingChatClient"/> class.</summary>
            <param name="innerClient">The underlying <see cref="T:Microsoft.Extensions.AI.IChatClient"/>.</param>
        </member>
        <member name="P:Microsoft.Extensions.AI.CachingChatClient.CoalesceStreamingUpdates">
            <summary>Gets or sets a value indicating whether streaming updates are coalesced.</summary>
            <value>
            <para>
            <see langword="true"/> if the client attempts to coalesce contiguous streaming updates
            into a single update, to reduce the number of individual items that are yielded on
            subsequent enumerations of the cached data; <see langword="false"/> if the updates are
            kept unaltered.
            </para>
            <para>
            The default is <see langword="true"/>.
            </para>
            </value>
        </member>
        <member name="M:Microsoft.Extensions.AI.CachingChatClient.GetResponseAsync(System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Extensions.AI.CachingChatClient.GetStreamingResponseAsync(System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Extensions.AI.CachingChatClient.GetCacheKey(System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatOptions,System.ReadOnlySpan{System.Object})">
            <summary>Computes a cache key for the specified values.</summary>
            <param name="messages">The messages to inform the key.</param>
            <param name="options">The <see cref="T:Microsoft.Extensions.AI.ChatOptions"/> to inform the key.</param>
            <param name="additionalValues">Any other values to inform the key.</param>
            <returns>The computed key.</returns>
        </member>
        <member name="M:Microsoft.Extensions.AI.CachingChatClient.ReadCacheAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns a previously cached <see cref="T:Microsoft.Extensions.AI.ChatResponse"/>, if available.
            This is used when there is a call to <see cref="M:Microsoft.Extensions.AI.IChatClient.GetResponseAsync(System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatOptions,System.Threading.CancellationToken)"/>.
            </summary>
            <param name="key">The cache key.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests.</param>
            <returns>The previously cached data, if available, otherwise <see langword="null"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Extensions.AI.CachingChatClient.ReadCacheStreamingAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns a previously cached list of <see cref="T:Microsoft.Extensions.AI.ChatResponseUpdate"/> values, if available.
            This is used when there is a call to <see cref="M:Microsoft.Extensions.AI.IChatClient.GetStreamingResponseAsync(System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatOptions,System.Threading.CancellationToken)"/>.
            </summary>
            <param name="key">The cache key.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests.</param>
            <returns>The previously cached data, if available, otherwise <see langword="null"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Extensions.AI.CachingChatClient.WriteCacheAsync(System.String,Microsoft.Extensions.AI.ChatResponse,System.Threading.CancellationToken)">
            <summary>
            Stores a <see cref="T:Microsoft.Extensions.AI.ChatResponse"/> in the underlying cache.
            This is used when there is a call to <see cref="M:Microsoft.Extensions.AI.IChatClient.GetResponseAsync(System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatOptions,System.Threading.CancellationToken)"/>.
            </summary>
            <param name="key">The cache key.</param>
            <param name="value">The <see cref="T:Microsoft.Extensions.AI.ChatResponse"/> to be stored.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the completion of the operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Extensions.AI.CachingChatClient.WriteCacheStreamingAsync(System.String,System.Collections.Generic.IReadOnlyList{Microsoft.Extensions.AI.ChatResponseUpdate},System.Threading.CancellationToken)">
            <summary>
            Stores a list of <see cref="T:Microsoft.Extensions.AI.ChatResponseUpdate"/> values in the underlying cache.
            This is used when there is a call to <see cref="M:Microsoft.Extensions.AI.IChatClient.GetStreamingResponseAsync(System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatOptions,System.Threading.CancellationToken)"/>.
            </summary>
            <param name="key">The cache key.</param>
            <param name="value">The <see cref="T:Microsoft.Extensions.AI.ChatResponse"/> to be stored.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the completion of the operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Extensions.AI.CachingChatClient.UseCaching(Microsoft.Extensions.AI.ChatOptions)">
            <summary>Determine whether to use caching with the request.</summary>
        </member>
        <member name="T:Microsoft.Extensions.AI.ChatClientBuilder">
            <summary>A builder for creating pipelines of <see cref="T:Microsoft.Extensions.AI.IChatClient"/>.</summary>
        </member>
        <member name="F:Microsoft.Extensions.AI.ChatClientBuilder._clientFactories">
            <summary>The registered client factory instances.</summary>
        </member>
        <member name="M:Microsoft.Extensions.AI.ChatClientBuilder.#ctor(Microsoft.Extensions.AI.IChatClient)">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.Extensions.AI.ChatClientBuilder"/> class.</summary>
            <param name="innerClient">The inner <see cref="T:Microsoft.Extensions.AI.IChatClient"/> that represents the underlying backend.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="innerClient"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Extensions.AI.ChatClientBuilder.#ctor(System.Func{System.IServiceProvider,Microsoft.Extensions.AI.IChatClient})">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.Extensions.AI.ChatClientBuilder"/> class.</summary>
            <param name="innerClientFactory">A callback that produces the inner <see cref="T:Microsoft.Extensions.AI.IChatClient"/> that represents the underlying backend.</param>
        </member>
        <member name="M:Microsoft.Extensions.AI.ChatClientBuilder.Build(System.IServiceProvider)">
            <summary>Builds an <see cref="T:Microsoft.Extensions.AI.IChatClient"/> that represents the entire pipeline. Calls to this instance will pass through each of the pipeline stages in turn.</summary>
            <param name="services">
            The <see cref="T:System.IServiceProvider"/> that should provide services to the <see cref="T:Microsoft.Extensions.AI.IChatClient"/> instances.
            If <see langword="null"/>, an empty <see cref="T:System.IServiceProvider"/> will be used.
            </param>
            <returns>An instance of <see cref="T:Microsoft.Extensions.AI.IChatClient"/> that represents the entire pipeline.</returns>
        </member>
        <member name="M:Microsoft.Extensions.AI.ChatClientBuilder.Use(System.Func{Microsoft.Extensions.AI.IChatClient,Microsoft.Extensions.AI.IChatClient})">
            <summary>Adds a factory for an intermediate chat client to the chat client pipeline.</summary>
            <param name="clientFactory">The client factory function.</param>
            <returns>The updated <see cref="T:Microsoft.Extensions.AI.ChatClientBuilder"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="clientFactory"/> is <see langword="null"/>.</exception>
            <related type="Article" href="https://learn.microsoft.com/dotnet/ai/microsoft-extensions-ai#functionality-pipelines">Pipelines of functionality.</related>
        </member>
        <member name="M:Microsoft.Extensions.AI.ChatClientBuilder.Use(System.Func{Microsoft.Extensions.AI.IChatClient,System.IServiceProvider,Microsoft.Extensions.AI.IChatClient})">
            <summary>Adds a factory for an intermediate chat client to the chat client pipeline.</summary>
            <param name="clientFactory">The client factory function.</param>
            <returns>The updated <see cref="T:Microsoft.Extensions.AI.ChatClientBuilder"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="clientFactory"/> is <see langword="null"/>.</exception>
            <related type="Article" href="https://learn.microsoft.com/dotnet/ai/microsoft-extensions-ai#functionality-pipelines">Pipelines of functionality.</related>
        </member>
        <member name="M:Microsoft.Extensions.AI.ChatClientBuilder.Use(System.Func{System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatOptions,System.Func{System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatOptions,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            Adds to the chat client pipeline an anonymous delegating chat client based on a delegate that provides
            an implementation for both <see cref="M:Microsoft.Extensions.AI.IChatClient.GetResponseAsync(System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatOptions,System.Threading.CancellationToken)"/> and <see cref="M:Microsoft.Extensions.AI.IChatClient.GetStreamingResponseAsync(System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatOptions,System.Threading.CancellationToken)"/>.
            </summary>
            <param name="sharedFunc">
            A delegate that provides the implementation for both <see cref="M:Microsoft.Extensions.AI.IChatClient.GetResponseAsync(System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatOptions,System.Threading.CancellationToken)"/> and
            <see cref="M:Microsoft.Extensions.AI.IChatClient.GetStreamingResponseAsync(System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatOptions,System.Threading.CancellationToken)"/>. This delegate is invoked with the list of chat messages, the chat
            options, a delegate that represents invoking the inner client, and a cancellation token. The delegate should be passed
            whatever chat messages, options, and cancellation token should be passed along to the next stage in the pipeline.
            It will handle both the non-streaming and streaming cases.
            </param>
            <returns>The updated <see cref="T:Microsoft.Extensions.AI.ChatClientBuilder"/> instance.</returns>
            <remarks>
            This overload can be used when the anonymous implementation needs to provide pre-processing and/or post-processing, but doesn't
            need to interact with the results of the operation, which will come from the inner client.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="sharedFunc"/> is <see langword="null"/>.</exception>
            <related type="Article" href="https://learn.microsoft.com/dotnet/ai/microsoft-extensions-ai#functionality-pipelines">Pipelines of functionality.</related>
        </member>
        <member name="M:Microsoft.Extensions.AI.ChatClientBuilder.Use(System.Func{System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatOptions,Microsoft.Extensions.AI.IChatClient,System.Threading.CancellationToken,System.Threading.Tasks.Task{Microsoft.Extensions.AI.ChatResponse}},System.Func{System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatOptions,Microsoft.Extensions.AI.IChatClient,System.Threading.CancellationToken,System.Collections.Generic.IAsyncEnumerable{Microsoft.Extensions.AI.ChatResponseUpdate}})">
            <summary>
            Adds to the chat client pipeline an anonymous delegating chat client based on a delegate that provides
            an implementation for both <see cref="M:Microsoft.Extensions.AI.IChatClient.GetResponseAsync(System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatOptions,System.Threading.CancellationToken)"/> and <see cref="M:Microsoft.Extensions.AI.IChatClient.GetStreamingResponseAsync(System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatOptions,System.Threading.CancellationToken)"/>.
            </summary>
            <param name="getResponseFunc">
            A delegate that provides the implementation for <see cref="M:Microsoft.Extensions.AI.IChatClient.GetResponseAsync(System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatOptions,System.Threading.CancellationToken)"/>. When <see langword="null"/>,
            <paramref name="getStreamingResponseFunc"/> must be non-null, and the implementation of <see cref="M:Microsoft.Extensions.AI.IChatClient.GetResponseAsync(System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatOptions,System.Threading.CancellationToken)"/>
            will use <paramref name="getStreamingResponseFunc"/> for the implementation.
            </param>
            <param name="getStreamingResponseFunc">
            A delegate that provides the implementation for <see cref="M:Microsoft.Extensions.AI.IChatClient.GetStreamingResponseAsync(System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatOptions,System.Threading.CancellationToken)"/>. When <see langword="null"/>,
            <paramref name="getResponseFunc"/> must be non-null, and the implementation of <see cref="M:Microsoft.Extensions.AI.IChatClient.GetStreamingResponseAsync(System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatOptions,System.Threading.CancellationToken)"/>
            will use <paramref name="getResponseFunc"/> for the implementation.
            </param>
            <returns>The updated <see cref="T:Microsoft.Extensions.AI.ChatClientBuilder"/> instance.</returns>
            <remarks>
            One or both delegates can be provided. If both are provided, they will be used for their respective methods:
            <paramref name="getResponseFunc"/> will provide the implementation of <see cref="M:Microsoft.Extensions.AI.IChatClient.GetResponseAsync(System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatOptions,System.Threading.CancellationToken)"/>, and
            <paramref name="getStreamingResponseFunc"/> will provide the implementation of <see cref="M:Microsoft.Extensions.AI.IChatClient.GetStreamingResponseAsync(System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatOptions,System.Threading.CancellationToken)"/>.
            If only one of the delegates is provided, it will be used for both methods. That means that if <paramref name="getResponseFunc"/>
            is supplied without <paramref name="getStreamingResponseFunc"/>, the implementation of <see cref="M:Microsoft.Extensions.AI.IChatClient.GetStreamingResponseAsync(System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatOptions,System.Threading.CancellationToken)"/>
            will employ limited streaming, as it will be operating on the batch output produced by <paramref name="getResponseFunc"/>. And if
            <paramref name="getStreamingResponseFunc"/> is supplied without <paramref name="getResponseFunc"/>, the implementation of
            <see cref="M:Microsoft.Extensions.AI.IChatClient.GetResponseAsync(System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatOptions,System.Threading.CancellationToken)"/> will be implemented by combining the updates from <paramref name="getStreamingResponseFunc"/>.
            </remarks>
            <exception cref="T:System.ArgumentNullException">Both <paramref name="getResponseFunc"/> and <paramref name="getStreamingResponseFunc"/> are <see langword="null"/>.</exception>
            <related type="Article" href="https://learn.microsoft.com/dotnet/ai/microsoft-extensions-ai#functionality-pipelines">Pipelines of functionality.</related>
        </member>
        <member name="T:Microsoft.Extensions.AI.ChatClientBuilderChatClientExtensions">
            <summary>Provides extension methods for working with <see cref="T:Microsoft.Extensions.AI.IChatClient"/> in the context of <see cref="T:Microsoft.Extensions.AI.ChatClientBuilder"/>.</summary>
        </member>
        <member name="M:Microsoft.Extensions.AI.ChatClientBuilderChatClientExtensions.AsBuilder(Microsoft.Extensions.AI.IChatClient)">
            <summary>Creates a new <see cref="T:Microsoft.Extensions.AI.ChatClientBuilder"/> using <paramref name="innerClient"/> as its inner client.</summary>
            <param name="innerClient">The client to use as the inner client.</param>
            <returns>The new <see cref="T:Microsoft.Extensions.AI.ChatClientBuilder"/> instance.</returns>
            <remarks>
            This method is equivalent to using the <see cref="T:Microsoft.Extensions.AI.ChatClientBuilder"/> constructor directly,
            specifying <paramref name="innerClient"/> as the inner client.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="innerClient"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:Microsoft.Extensions.AI.ChatClientStructuredOutputExtensions">
            <summary>
            Provides extension methods on <see cref="T:Microsoft.Extensions.AI.IChatClient"/> that simplify working with structured output.
            </summary>
            <related type="Article" href="https://learn.microsoft.com/dotnet/ai/quickstarts/structured-output">Request a response with structured output.</related>
        </member>
        <member name="M:Microsoft.Extensions.AI.ChatClientStructuredOutputExtensions.GetResponseAsync``1(Microsoft.Extensions.AI.IChatClient,System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatOptions,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>Sends chat messages, requesting a response matching the type <typeparamref name="T"/>.</summary>
            <param name="chatClient">The <see cref="T:Microsoft.Extensions.AI.IChatClient"/>.</param>
            <param name="messages">The chat content to send.</param>
            <param name="options">The chat options to configure the request.</param>
            <param name="useJsonSchemaResponseFormat">
            <see langword="true" /> to set a JSON schema on the <see cref="T:Microsoft.Extensions.AI.ChatResponseFormat"/>; otherwise, <see langword="false" />. The default is <see langword="true" />.
            Using a JSON schema improves reliability if the underlying model supports native structured output with a schema, but might cause an error if the model does not support it.
            </param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>The response messages generated by the client.</returns>
            <typeparam name="T">The type of structured output to request.</typeparam>
        </member>
        <member name="M:Microsoft.Extensions.AI.ChatClientStructuredOutputExtensions.GetResponseAsync``1(Microsoft.Extensions.AI.IChatClient,System.String,Microsoft.Extensions.AI.ChatOptions,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>Sends a user chat text message, requesting a response matching the type <typeparamref name="T"/>.</summary>
            <param name="chatClient">The <see cref="T:Microsoft.Extensions.AI.IChatClient"/>.</param>
            <param name="chatMessage">The text content for the chat message to send.</param>
            <param name="options">The chat options to configure the request.</param>
            <param name="useJsonSchemaResponseFormat">
            <see langword="true" /> to set a JSON schema on the <see cref="T:Microsoft.Extensions.AI.ChatResponseFormat"/>; otherwise, <see langword="false" />.
            Using a JSON schema improves reliability if the underlying model supports native structured output with a schema, but might cause an error if the model does not support it.
            </param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>The response messages generated by the client.</returns>
            <typeparam name="T">The type of structured output to request.</typeparam>
            <related type="Article" href="https://learn.microsoft.com/dotnet/ai/quickstarts/structured-output">Request a response with structured output.</related>
        </member>
        <member name="M:Microsoft.Extensions.AI.ChatClientStructuredOutputExtensions.GetResponseAsync``1(Microsoft.Extensions.AI.IChatClient,Microsoft.Extensions.AI.ChatMessage,Microsoft.Extensions.AI.ChatOptions,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>Sends a chat message, requesting a response matching the type <typeparamref name="T"/>.</summary>
            <param name="chatClient">The <see cref="T:Microsoft.Extensions.AI.IChatClient"/>.</param>
            <param name="chatMessage">The chat message to send.</param>
            <param name="options">The chat options to configure the request.</param>
            <param name="useJsonSchemaResponseFormat">
            <see langword="true" /> to set a JSON schema on the <see cref="T:Microsoft.Extensions.AI.ChatResponseFormat"/>; otherwise, <see langword="false" />. The default is <see langword="true" />.
            Using a JSON schema improves reliability if the underlying model supports native structured output with a schema, but might cause an error if the model does not support it.
            </param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>The response messages generated by the client.</returns>
            <typeparam name="T">The type of structured output to request.</typeparam>
        </member>
        <member name="M:Microsoft.Extensions.AI.ChatClientStructuredOutputExtensions.GetResponseAsync``1(Microsoft.Extensions.AI.IChatClient,System.String,System.Text.Json.JsonSerializerOptions,Microsoft.Extensions.AI.ChatOptions,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>Sends a user chat text message, requesting a response matching the type <typeparamref name="T"/>.</summary>
            <param name="chatClient">The <see cref="T:Microsoft.Extensions.AI.IChatClient"/>.</param>
            <param name="chatMessage">The text content for the chat message to send.</param>
            <param name="serializerOptions">The JSON serialization options to use.</param>
            <param name="options">The chat options to configure the request.</param>
            <param name="useJsonSchemaResponseFormat">
            <see langword="true" /> to set a JSON schema on the <see cref="T:Microsoft.Extensions.AI.ChatResponseFormat"/>; otherwise, <see langword="false" />. The default is <see langword="true" />.
            Using a JSON schema improves reliability if the underlying model supports native structured output with a schema, but might cause an error if the model does not support it.
            </param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>The response messages generated by the client.</returns>
            <typeparam name="T">The type of structured output to request.</typeparam>
        </member>
        <member name="M:Microsoft.Extensions.AI.ChatClientStructuredOutputExtensions.GetResponseAsync``1(Microsoft.Extensions.AI.IChatClient,Microsoft.Extensions.AI.ChatMessage,System.Text.Json.JsonSerializerOptions,Microsoft.Extensions.AI.ChatOptions,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>Sends a chat message, requesting a response matching the type <typeparamref name="T"/>.</summary>
            <param name="chatClient">The <see cref="T:Microsoft.Extensions.AI.IChatClient"/>.</param>
            <param name="chatMessage">The chat message to send.</param>
            <param name="serializerOptions">The JSON serialization options to use.</param>
            <param name="options">The chat options to configure the request.</param>
            <param name="useJsonSchemaResponseFormat">
            <see langword="true" /> to set a JSON schema on the <see cref="T:Microsoft.Extensions.AI.ChatResponseFormat"/>; otherwise, <see langword="false" />. The default is <see langword="true" />.
            Using a JSON schema improves reliability if the underlying model supports native structured output with a schema, but might cause an error if the model does not support it.
            </param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>The response messages generated by the client.</returns>
            <typeparam name="T">The type of structured output to request.</typeparam>
        </member>
        <member name="M:Microsoft.Extensions.AI.ChatClientStructuredOutputExtensions.GetResponseAsync``1(Microsoft.Extensions.AI.IChatClient,System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage},System.Text.Json.JsonSerializerOptions,Microsoft.Extensions.AI.ChatOptions,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>Sends chat messages, requesting a response matching the type <typeparamref name="T"/>.</summary>
            <param name="chatClient">The <see cref="T:Microsoft.Extensions.AI.IChatClient"/>.</param>
            <param name="messages">The chat content to send.</param>
            <param name="serializerOptions">The JSON serialization options to use.</param>
            <param name="options">The chat options to configure the request.</param>
            <param name="useJsonSchemaResponseFormat">
            <see langword="true" /> to set a JSON schema on the <see cref="T:Microsoft.Extensions.AI.ChatResponseFormat"/>; otherwise, <see langword="false" />. The default is <see langword="true" />.
            Using a JSON schema improves reliability if the underlying model supports native structured output with a schema, but might cause an error if the model does not support it.
            </param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>The response messages generated by the client.</returns>
            <typeparam name="T">The type of structured output to request.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="chatClient"/> or <paramref name="messages"/> or <paramref name="serializerOptions"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Extensions.AI.ChatClientStructuredOutputExtensions.SanitizeMemberName(System.String)">
            <summary>
            Removes characters from a .NET member name that shouldn't be used in an AI function name.
            </summary>
            <param name="memberName">The .NET member name that should be sanitized.</param>
            <returns>
            Replaces non-alphanumeric characters in the identifier with the underscore character.
            Primarily intended to remove characters produced by compiler-generated method name mangling.
            </returns>
        </member>
        <member name="M:Microsoft.Extensions.AI.ChatClientStructuredOutputExtensions.InvalidNameCharsRegex">
            <summary>Regex that flags any character other than ASCII digits or letters or the underscore.</summary>
        </member>
        <member name="T:Microsoft.Extensions.AI.ChatResponse`1">
            <summary>Represents the response to a chat request with structured output.</summary>
            <typeparam name="T">The type of value expected from the chat response.</typeparam>
            <remarks>
            Language models are not guaranteed to honor the requested schema. If the model's output is not
            parseable as the expected type, then <see cref="M:Microsoft.Extensions.AI.ChatResponse`1.TryGetResult(`0@)"/> will return <see langword="false"/>.
            You can access the underlying JSON response on the <see cref="P:Microsoft.Extensions.AI.ChatResponse.Text"/> property.
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.AI.ChatResponse`1.#ctor(Microsoft.Extensions.AI.ChatResponse,System.Text.Json.JsonSerializerOptions)">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.Extensions.AI.ChatResponse`1"/> class.</summary>
            <param name="response">The unstructured <see cref="T:Microsoft.Extensions.AI.ChatResponse"/> that is being wrapped.</param>
            <param name="serializerOptions">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> to use when deserializing the result.</param>
        </member>
        <member name="P:Microsoft.Extensions.AI.ChatResponse`1.Result">
            <summary>
            Gets the result value of the chat response as an instance of <typeparamref name="T"/>.
            </summary>
            <remarks>
            If the response did not contain JSON, or if deserialization fails, this property will throw.
            To avoid exceptions, use <see cref="M:Microsoft.Extensions.AI.ChatResponse`1.TryGetResult(`0@)"/> instead.
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.AI.ChatResponse`1.TryGetResult(`0@)">
            <summary>
            Attempts to deserialize the result to produce an instance of <typeparamref name="T"/>.
            </summary>
            <param name="result">When this method returns, contains the result.</param>
            <returns><see langword="true"/> if the result was produced, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="P:Microsoft.Extensions.AI.ChatResponse`1.IsWrappedInObject">
            <summary>
            Gets or sets a value indicating whether the JSON schema has an extra object wrapper.
            </summary>
            <remarks>
            The wrapper is required for any non-JSON-object-typed values such as numbers, enum values, and arrays.
            </remarks>
        </member>
        <member name="T:Microsoft.Extensions.AI.ConfigureOptionsChatClient">
            <summary>Represents a delegating chat client that configures a <see cref="T:Microsoft.Extensions.AI.ChatOptions"/> instance used by the remainder of the pipeline.</summary>
        </member>
        <member name="F:Microsoft.Extensions.AI.ConfigureOptionsChatClient._configureOptions">
            <summary>The callback delegate used to configure options.</summary>
        </member>
        <member name="M:Microsoft.Extensions.AI.ConfigureOptionsChatClient.#ctor(Microsoft.Extensions.AI.IChatClient,System.Action{Microsoft.Extensions.AI.ChatOptions})">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.Extensions.AI.ConfigureOptionsChatClient"/> class with the specified <paramref name="configure"/> callback.</summary>
            <param name="innerClient">The inner client.</param>
            <param name="configure">
            The delegate to invoke to configure the <see cref="T:Microsoft.Extensions.AI.ChatOptions"/> instance. It is passed a clone of the caller-supplied <see cref="T:Microsoft.Extensions.AI.ChatOptions"/> instance
            (or a newly constructed instance if the caller-supplied instance is <see langword="null"/>).
            </param>
            <remarks>
            The <paramref name="configure"/> delegate is passed either a new instance of <see cref="T:Microsoft.Extensions.AI.ChatOptions"/> if
            the caller didn't supply a <see cref="T:Microsoft.Extensions.AI.ChatOptions"/> instance, or a clone (via <see cref="M:Microsoft.Extensions.AI.ChatOptions.Clone"/> of the caller-supplied
            instance if one was supplied.
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.AI.ConfigureOptionsChatClient.GetResponseAsync(System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Extensions.AI.ConfigureOptionsChatClient.GetStreamingResponseAsync(System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Extensions.AI.ConfigureOptionsChatClient.Configure(Microsoft.Extensions.AI.ChatOptions)">
            <summary>Creates and configures the <see cref="T:Microsoft.Extensions.AI.ChatOptions"/> to pass along to the inner client.</summary>
        </member>
        <member name="T:Microsoft.Extensions.AI.ConfigureOptionsChatClientBuilderExtensions">
            <summary>Provides extensions for configuring <see cref="T:Microsoft.Extensions.AI.ConfigureOptionsChatClient"/> instances.</summary>
        </member>
        <member name="M:Microsoft.Extensions.AI.ConfigureOptionsChatClientBuilderExtensions.ConfigureOptions(Microsoft.Extensions.AI.ChatClientBuilder,System.Action{Microsoft.Extensions.AI.ChatOptions})">
            <summary>
            Adds a callback that configures a <see cref="T:Microsoft.Extensions.AI.ChatOptions"/> to be passed to the next client in the pipeline.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.Extensions.AI.ChatClientBuilder"/>.</param>
            <param name="configure">
            The delegate to invoke to configure the <see cref="T:Microsoft.Extensions.AI.ChatOptions"/> instance.
            It is passed a clone of the caller-supplied <see cref="T:Microsoft.Extensions.AI.ChatOptions"/> instance (or a newly constructed instance if the caller-supplied instance is <see langword="null"/>).
            </param>
            <remarks>
            This method can be used to set default options. The <paramref name="configure"/> delegate is passed either a new instance of
            <see cref="T:Microsoft.Extensions.AI.ChatOptions"/> if the caller didn't supply a <see cref="T:Microsoft.Extensions.AI.ChatOptions"/> instance, or a clone (via <see cref="M:Microsoft.Extensions.AI.ChatOptions.Clone"/>)
            of the caller-supplied instance if one was supplied.
            </remarks>
            <returns>The <paramref name="builder"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="builder"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="configure"/> is <see langword="null"/>.</exception>
            <related type="Article" href="https://learn.microsoft.com/dotnet/ai/microsoft-extensions-ai#provide-options">Provide options.</related>
        </member>
        <member name="T:Microsoft.Extensions.AI.DistributedCachingChatClient">
            <summary>
            A delegating chat client that caches the results of response calls, storing them as JSON in an <see cref="T:Microsoft.Extensions.Caching.Distributed.IDistributedCache"/>.
            </summary>
            <remarks>
            <para>
            The <see cref="T:Microsoft.Extensions.AI.DistributedCachingChatClient"/> employs JSON serialization as part of storing cached data. It is not guaranteed that
            the object models used by <see cref="T:Microsoft.Extensions.AI.ChatMessage"/>, <see cref="T:Microsoft.Extensions.AI.ChatOptions"/>, <see cref="T:Microsoft.Extensions.AI.ChatResponse"/>, <see cref="T:Microsoft.Extensions.AI.ChatResponseUpdate"/>,
            or any of the other objects in the chat client pipeline will roundtrip through JSON serialization with full fidelity. For example,
            <see cref="P:Microsoft.Extensions.AI.ChatMessage.RawRepresentation"/> will be ignored, and <see cref="T:System.Object"/> values in <see cref="P:Microsoft.Extensions.AI.ChatMessage.AdditionalProperties"/>
            will deserialize as <see cref="T:System.Text.Json.JsonElement"/> rather than as the original type. In general, code using <see cref="T:Microsoft.Extensions.AI.DistributedCachingChatClient"/>
            should only rely on accessing data that can be preserved well enough through JSON serialization and deserialization.
            </para>
            <para>
            The provided implementation of <see cref="T:Microsoft.Extensions.AI.IChatClient"/> is thread-safe for concurrent use so long as the employed
            <see cref="T:Microsoft.Extensions.Caching.Distributed.IDistributedCache"/> is similarly thread-safe for concurrent use.
            </para>
            </remarks>
        </member>
        <member name="F:Microsoft.Extensions.AI.DistributedCachingChatClient._storage">
            <summary>The <see cref="T:Microsoft.Extensions.Caching.Distributed.IDistributedCache"/> instance that will be used as the backing store for the cache.</summary>
        </member>
        <member name="F:Microsoft.Extensions.AI.DistributedCachingChatClient._jsonSerializerOptions">
            <summary>The <see cref="P:Microsoft.Extensions.AI.DistributedCachingChatClient.JsonSerializerOptions"/> to use when serializing cache data.</summary>
        </member>
        <member name="M:Microsoft.Extensions.AI.DistributedCachingChatClient.#ctor(Microsoft.Extensions.AI.IChatClient,Microsoft.Extensions.Caching.Distributed.IDistributedCache)">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.Extensions.AI.DistributedCachingChatClient"/> class.</summary>
            <param name="innerClient">The underlying <see cref="T:Microsoft.Extensions.AI.IChatClient"/>.</param>
            <param name="storage">An <see cref="T:Microsoft.Extensions.Caching.Distributed.IDistributedCache"/> instance that will be used as the backing store for the cache.</param>
        </member>
        <member name="P:Microsoft.Extensions.AI.DistributedCachingChatClient.JsonSerializerOptions">
            <summary>Gets or sets JSON serialization options to use when serializing cache data.</summary>
        </member>
        <member name="M:Microsoft.Extensions.AI.DistributedCachingChatClient.ReadCacheAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Extensions.AI.DistributedCachingChatClient.ReadCacheStreamingAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Extensions.AI.DistributedCachingChatClient.WriteCacheAsync(System.String,Microsoft.Extensions.AI.ChatResponse,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Extensions.AI.DistributedCachingChatClient.WriteCacheStreamingAsync(System.String,System.Collections.Generic.IReadOnlyList{Microsoft.Extensions.AI.ChatResponseUpdate},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Extensions.AI.DistributedCachingChatClient.GetCacheKey(System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatOptions,System.ReadOnlySpan{System.Object})">
            <summary>Computes a cache key for the specified values.</summary>
            <param name="messages">The messages to inform the key.</param>
            <param name="options">The <see cref="T:Microsoft.Extensions.AI.ChatOptions"/> to inform the key.</param>
            <param name="additionalValues">Any other values to inform the key.</param>
            <returns>The computed key.</returns>
            <remarks>
            <para>
            The <paramref name="messages"/>, <paramref name="options"/>, and <paramref name="additionalValues"/> are serialized to JSON using <see cref="P:Microsoft.Extensions.AI.DistributedCachingChatClient.JsonSerializerOptions"/>
            in order to compute the key.
            </para>
            <para>
            The generated cache key is not guaranteed to be stable across releases of the library.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.Extensions.AI.DistributedCachingChatClientBuilderExtensions">
            <summary>
            Extension methods for adding a <see cref="T:Microsoft.Extensions.AI.DistributedCachingChatClient"/> to an <see cref="T:Microsoft.Extensions.AI.IChatClient"/> pipeline.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.AI.DistributedCachingChatClientBuilderExtensions.UseDistributedCache(Microsoft.Extensions.AI.ChatClientBuilder,Microsoft.Extensions.Caching.Distributed.IDistributedCache,System.Action{Microsoft.Extensions.AI.DistributedCachingChatClient})">
            <summary>
            Adds a <see cref="T:Microsoft.Extensions.AI.DistributedCachingChatClient"/> as the next stage in the pipeline.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.Extensions.AI.ChatClientBuilder"/>.</param>
            <param name="storage">
            An optional <see cref="T:Microsoft.Extensions.Caching.Distributed.IDistributedCache"/> instance that will be used as the backing store for the cache. If not supplied, an instance will be resolved from the service provider.
            </param>
            <param name="configure">An optional callback that can be used to configure the <see cref="T:Microsoft.Extensions.AI.DistributedCachingChatClient"/> instance.</param>
            <returns>The <see cref="T:Microsoft.Extensions.AI.ChatClientBuilder"/> provided as <paramref name="builder"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="builder"/> is <see langword="null"/>.</exception>
            <remarks>
            The <see cref="T:Microsoft.Extensions.AI.DistributedCachingChatClient"/> employs JSON serialization as part of storing the cached data. It is not guaranteed that
            the object models used by <see cref="T:Microsoft.Extensions.AI.ChatMessage"/>, <see cref="T:Microsoft.Extensions.AI.ChatOptions"/>, <see cref="T:Microsoft.Extensions.AI.ChatResponse"/>, <see cref="T:Microsoft.Extensions.AI.ChatResponseUpdate"/>,
            or any of the other objects in the chat client pipeline will roundtrip through JSON serialization with full fidelity. For example,
            <see cref="P:Microsoft.Extensions.AI.ChatMessage.RawRepresentation"/> will be ignored, and <see cref="T:System.Object"/> values in <see cref="P:Microsoft.Extensions.AI.ChatMessage.AdditionalProperties"/>
            will deserialize as <see cref="T:System.Text.Json.JsonElement"/> rather than as the original type. In general, code using <see cref="T:Microsoft.Extensions.AI.DistributedCachingChatClient"/>
            should only rely on accessing data that can be preserved well enough through JSON serialization and deserialization.
            </remarks>
        </member>
        <member name="T:Microsoft.Extensions.AI.FunctionInvocationContext">
            <summary>Provides context for an in-flight function invocation.</summary>
        </member>
        <member name="F:Microsoft.Extensions.AI.FunctionInvocationContext._nopFunction">
            <summary>
            A nop function used to allow <see cref="P:Microsoft.Extensions.AI.FunctionInvocationContext.Function"/> to be non-nullable. Default instances of
            <see cref="T:Microsoft.Extensions.AI.FunctionInvocationContext"/> start with this as the target function.
            </summary>
        </member>
        <member name="F:Microsoft.Extensions.AI.FunctionInvocationContext._messages">
            <summary>The chat contents associated with the operation that initiated this function call request.</summary>
        </member>
        <member name="F:Microsoft.Extensions.AI.FunctionInvocationContext._function">
            <summary>The AI function to be invoked.</summary>
        </member>
        <member name="F:Microsoft.Extensions.AI.FunctionInvocationContext._callContent">
            <summary>The function call content information associated with this invocation.</summary>
        </member>
        <member name="F:Microsoft.Extensions.AI.FunctionInvocationContext._arguments">
            <summary>The arguments used with the function.</summary>
        </member>
        <member name="M:Microsoft.Extensions.AI.FunctionInvocationContext.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.Extensions.AI.FunctionInvocationContext"/> class.</summary>
        </member>
        <member name="P:Microsoft.Extensions.AI.FunctionInvocationContext.Function">
            <summary>Gets or sets the AI function to be invoked.</summary>
        </member>
        <member name="P:Microsoft.Extensions.AI.FunctionInvocationContext.Arguments">
            <summary>Gets or sets the arguments associated with this invocation.</summary>
        </member>
        <member name="P:Microsoft.Extensions.AI.FunctionInvocationContext.CallContent">
            <summary>Gets or sets the function call content information associated with this invocation.</summary>
        </member>
        <member name="P:Microsoft.Extensions.AI.FunctionInvocationContext.Messages">
            <summary>Gets or sets the chat contents associated with the operation that initiated this function call request.</summary>
        </member>
        <member name="P:Microsoft.Extensions.AI.FunctionInvocationContext.Options">
            <summary>Gets or sets the chat options associated with the operation that initiated this function call request.</summary>
        </member>
        <member name="P:Microsoft.Extensions.AI.FunctionInvocationContext.Iteration">
            <summary>Gets or sets the number of this iteration with the underlying client.</summary>
            <remarks>
            The initial request to the client that passes along the chat contents provided to the <see cref="T:Microsoft.Extensions.AI.FunctionInvokingChatClient"/>
            is iteration 1. If the client responds with a function call request, the next request to the client is iteration 2, and so on.
            </remarks>
        </member>
        <member name="P:Microsoft.Extensions.AI.FunctionInvocationContext.FunctionCallIndex">
            <summary>Gets or sets the index of the function call within the iteration.</summary>
            <remarks>
            The response from the underlying client may include multiple function call requests.
            This index indicates the position of the function call within the iteration.
            </remarks>
        </member>
        <member name="P:Microsoft.Extensions.AI.FunctionInvocationContext.FunctionCount">
            <summary>Gets or sets the total number of function call requests within the iteration.</summary>
            <remarks>
            The response from the underlying client might include multiple function call requests.
            This count indicates how many there were.
            </remarks>
        </member>
        <member name="P:Microsoft.Extensions.AI.FunctionInvocationContext.Terminate">
            <summary>Gets or sets a value indicating whether to terminate the request.</summary>
            <remarks>
            In response to a function call request, the function might be invoked, its result added to the chat contents,
            and a new request issued to the wrapped client. If this property is set to <see langword="true"/>, that subsequent request
            will not be issued and instead the loop immediately terminated rather than continuing until there are no
            more function call requests in responses.
            <para>
            If multiple function call requests are issued as part of a single iteration (a single response from the inner <see cref="T:Microsoft.Extensions.AI.IChatClient"/>),
            setting <see cref="P:Microsoft.Extensions.AI.FunctionInvocationContext.Terminate" /> to <see langword="true" /> may also prevent subsequent requests within that same iteration from being processed.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.Extensions.AI.FunctionInvocationContext.IsStreaming">
            <summary>
            Gets or sets a value indicating whether the function invocation is occurring as part of a
            <see cref="M:Microsoft.Extensions.AI.IChatClient.GetStreamingResponseAsync(System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatOptions,System.Threading.CancellationToken)"/> call as opposed to a <see cref="M:Microsoft.Extensions.AI.IChatClient.GetResponseAsync(System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatOptions,System.Threading.CancellationToken)"/> call.
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.AI.FunctionInvokingChatClient">
            <summary>
            A delegating chat client that invokes functions defined on <see cref="T:Microsoft.Extensions.AI.ChatOptions"/>.
            Include this in a chat pipeline to resolve function calls automatically.
            </summary>
            <remarks>
            <para>
            When this client receives a <see cref="T:Microsoft.Extensions.AI.FunctionCallContent"/> in a chat response, it responds
            by calling the corresponding <see cref="T:Microsoft.Extensions.AI.AIFunction"/> defined in <see cref="P:Microsoft.Extensions.AI.ChatOptions.Tools"/>,
            producing a <see cref="T:Microsoft.Extensions.AI.FunctionResultContent"/> that it sends back to the inner client. This loop
            is repeated until there are no more function calls to make, or until another stop condition is met,
            such as hitting <see cref="P:Microsoft.Extensions.AI.FunctionInvokingChatClient.MaximumIterationsPerRequest"/>.
            </para>
            <para>
            The provided implementation of <see cref="T:Microsoft.Extensions.AI.IChatClient"/> is thread-safe for concurrent use so long as the
            <see cref="T:Microsoft.Extensions.AI.AIFunction"/> instances employed as part of the supplied <see cref="T:Microsoft.Extensions.AI.ChatOptions"/> are also safe.
            The <see cref="P:Microsoft.Extensions.AI.FunctionInvokingChatClient.AllowConcurrentInvocation"/> property can be used to control whether multiple function invocation
            requests as part of the same request are invocable concurrently, but even with that set to <see langword="false"/>
            (the default), multiple concurrent requests to this same instance and using the same tools could result in those
            tools being used concurrently (one per request). For example, a function that accesses the HttpContext of a specific
            ASP.NET web request should only be used as part of a single <see cref="T:Microsoft.Extensions.AI.ChatOptions"/> at a time, and only with
            <see cref="P:Microsoft.Extensions.AI.FunctionInvokingChatClient.AllowConcurrentInvocation"/> set to <see langword="false"/>, in case the inner client decided to issue multiple
            invocation requests to that same function.
            </para>
            </remarks>
        </member>
        <member name="F:Microsoft.Extensions.AI.FunctionInvokingChatClient._currentContext">
            <summary>The <see cref="T:Microsoft.Extensions.AI.FunctionInvocationContext"/> for the current function invocation.</summary>
        </member>
        <member name="P:Microsoft.Extensions.AI.FunctionInvokingChatClient.FunctionInvocationServices">
            <summary>Gets the <see cref="T:System.IServiceProvider"/> specified when constructing the <see cref="T:Microsoft.Extensions.AI.FunctionInvokingChatClient"/>, if any.</summary>
        </member>
        <member name="F:Microsoft.Extensions.AI.FunctionInvokingChatClient._logger">
            <summary>The logger to use for logging information about function invocation.</summary>
        </member>
        <member name="F:Microsoft.Extensions.AI.FunctionInvokingChatClient._activitySource">
            <summary>The <see cref="T:System.Diagnostics.ActivitySource"/> to use for telemetry.</summary>
            <remarks>This component does not own the instance and should not dispose it.</remarks>
        </member>
        <member name="F:Microsoft.Extensions.AI.FunctionInvokingChatClient._maximumIterationsPerRequest">
            <summary>Maximum number of roundtrips allowed to the inner client.</summary>
        </member>
        <member name="F:Microsoft.Extensions.AI.FunctionInvokingChatClient._maximumConsecutiveErrorsPerRequest">
            <summary>Maximum number of consecutive iterations that are allowed contain at least one exception result. If the limit is exceeded, we rethrow the exception instead of continuing.</summary>
        </member>
        <member name="M:Microsoft.Extensions.AI.FunctionInvokingChatClient.#ctor(Microsoft.Extensions.AI.IChatClient,Microsoft.Extensions.Logging.ILoggerFactory,System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.AI.FunctionInvokingChatClient"/> class.
            </summary>
            <param name="innerClient">The underlying <see cref="T:Microsoft.Extensions.AI.IChatClient"/>, or the next instance in a chain of clients.</param>
            <param name="loggerFactory">An <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> to use for logging information about function invocation.</param>
            <param name="functionInvocationServices">An optional <see cref="T:System.IServiceProvider"/> to use for resolving services required by the <see cref="T:Microsoft.Extensions.AI.AIFunction"/> instances being invoked.</param>
        </member>
        <member name="P:Microsoft.Extensions.AI.FunctionInvokingChatClient.CurrentContext">
            <summary>
            Gets or sets the <see cref="T:Microsoft.Extensions.AI.FunctionInvocationContext"/> for the current function invocation.
            </summary>
            <remarks>
            This value flows across async calls.
            </remarks>
        </member>
        <member name="P:Microsoft.Extensions.AI.FunctionInvokingChatClient.IncludeDetailedErrors">
            <summary>
            Gets or sets a value indicating whether detailed exception information should be included
            in the chat history when calling the underlying <see cref="T:Microsoft.Extensions.AI.IChatClient"/>.
            </summary>
            <value>
            <see langword="true"/> if the full exception message is added to the chat history
            when calling the underlying <see cref="T:Microsoft.Extensions.AI.IChatClient"/>.
            <see langword="false"/> if a generic error message is included in the chat history.
            The default value is <see langword="false"/>.
            </value>
            <remarks>
            <para>
            Setting the value to <see langword="false"/> prevents the underlying language model from disclosing
            raw exception details to the end user, since it doesn't receive that information. Even in this
            case, the raw <see cref="T:System.Exception"/> object is available to application code by inspecting
            the <see cref="P:Microsoft.Extensions.AI.FunctionResultContent.Exception"/> property.
            </para>
            <para>
            Setting the value to <see langword="true"/> can help the underlying <see cref="T:Microsoft.Extensions.AI.IChatClient"/> bypass problems on
            its own, for example by retrying the function call with different arguments. However it might
            result in disclosing the raw exception information to external users, which can be a security
            concern depending on the application scenario.
            </para>
            <para>
            Changing the value of this property while the client is in use might result in inconsistencies
            as to whether detailed errors are provided during an in-flight request.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.Extensions.AI.FunctionInvokingChatClient.AllowConcurrentInvocation">
            <summary>
            Gets or sets a value indicating whether to allow concurrent invocation of functions.
            </summary>
            <value>
            <see langword="true"/> if multiple function calls can execute in parallel.
            <see langword="false"/> if function calls are processed serially.
            The default value is <see langword="false"/>.
            </value>
            <remarks>
            An individual response from the inner client might contain multiple function call requests.
            By default, such function calls are processed serially. Set <see cref="P:Microsoft.Extensions.AI.FunctionInvokingChatClient.AllowConcurrentInvocation"/> to
            <see langword="true"/> to enable concurrent invocation such that multiple function calls can execute in parallel.
            </remarks>
        </member>
        <member name="P:Microsoft.Extensions.AI.FunctionInvokingChatClient.MaximumIterationsPerRequest">
            <summary>
            Gets or sets the maximum number of iterations per request.
            </summary>
            <value>
            The maximum number of iterations per request.
            The default value is 10.
            </value>
            <remarks>
            <para>
            Each request to this <see cref="T:Microsoft.Extensions.AI.FunctionInvokingChatClient"/> might end up making
            multiple requests to the inner client. Each time the inner client responds with
            a function call request, this client might perform that invocation and send the results
            back to the inner client in a new request. This property limits the number of times
            such a roundtrip is performed. The value must be at least one, as it includes the initial request.
            </para>
            <para>
            Changing the value of this property while the client is in use might result in inconsistencies
            as to how many iterations are allowed for an in-flight request.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.Extensions.AI.FunctionInvokingChatClient.MaximumConsecutiveErrorsPerRequest">
            <summary>
            Gets or sets the maximum number of consecutive iterations that are allowed to fail with an error.
            </summary>
            <value>
            The maximum number of consecutive iterations that are allowed to fail with an error.
            The default value is 3.
            </value>
            <remarks>
            <para>
            When function invocations fail with an exception, the <see cref="T:Microsoft.Extensions.AI.FunctionInvokingChatClient"/>
            continues to make requests to the inner client, optionally supplying exception information (as
            controlled by <see cref="P:Microsoft.Extensions.AI.FunctionInvokingChatClient.IncludeDetailedErrors"/>). This allows the <see cref="T:Microsoft.Extensions.AI.IChatClient"/> to
            recover from errors by trying other function parameters that may succeed.
            </para>
            <para>
            However, in case function invocations continue to produce exceptions, this property can be used to
            limit the number of consecutive failing attempts. When the limit is reached, the exception will be
            rethrown to the caller.
            </para>
            <para>
            If the value is set to zero, all function calling exceptions immediately terminate the function
            invocation loop and the exception will be rethrown to the caller.
            </para>
            <para>
            Changing the value of this property while the client is in use might result in inconsistencies
            as to how many iterations are allowed for an in-flight request.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.AI.FunctionInvokingChatClient.GetResponseAsync(System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Extensions.AI.FunctionInvokingChatClient.GetStreamingResponseAsync(System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Extensions.AI.FunctionInvokingChatClient.AddUsageTags(System.Diagnostics.Activity,Microsoft.Extensions.AI.UsageDetails)">
            <summary>Adds tags to <paramref name="activity"/> for usage details in <paramref name="usage"/>.</summary>
        </member>
        <member name="M:Microsoft.Extensions.AI.FunctionInvokingChatClient.FixupHistories(System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage},System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage}@,System.Collections.Generic.List{Microsoft.Extensions.AI.ChatMessage}@,Microsoft.Extensions.AI.ChatResponse,System.Collections.Generic.List{Microsoft.Extensions.AI.ChatMessage},System.Boolean@)">
            <summary>Prepares the various chat message lists after a response from the inner client and before invoking functions.</summary>
            <param name="originalMessages">The original messages provided by the caller.</param>
            <param name="messages">The messages reference passed to the inner client.</param>
            <param name="augmentedHistory">The augmented history containing all the messages to be sent.</param>
            <param name="response">The most recent response being handled.</param>
            <param name="allTurnsResponseMessages">A list of all response messages received up until this point.</param>
            <param name="lastIterationHadConversationId">Whether the previous iteration's response had a conversation ID.</param>
        </member>
        <member name="M:Microsoft.Extensions.AI.FunctionInvokingChatClient.CopyFunctionCalls(System.Collections.Generic.IList{Microsoft.Extensions.AI.ChatMessage},System.Collections.Generic.List{Microsoft.Extensions.AI.FunctionCallContent}@)">
            <summary>Copies any <see cref="T:Microsoft.Extensions.AI.FunctionCallContent"/> from <paramref name="messages"/> to <paramref name="functionCalls"/>.</summary>
        </member>
        <member name="M:Microsoft.Extensions.AI.FunctionInvokingChatClient.CopyFunctionCalls(System.Collections.Generic.IList{Microsoft.Extensions.AI.AIContent},System.Collections.Generic.List{Microsoft.Extensions.AI.FunctionCallContent}@)">
            <summary>Copies any <see cref="T:Microsoft.Extensions.AI.FunctionCallContent"/> from <paramref name="content"/> to <paramref name="functionCalls"/>.</summary>
        </member>
        <member name="M:Microsoft.Extensions.AI.FunctionInvokingChatClient.ProcessFunctionCallsAsync(System.Collections.Generic.List{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatOptions,System.Collections.Generic.List{Microsoft.Extensions.AI.FunctionCallContent},System.Int32,System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Processes the function calls in the <paramref name="functionCallContents"/> list.
            </summary>
            <param name="messages">The current chat contents, inclusive of the function call contents being processed.</param>
            <param name="options">The options used for the response being processed.</param>
            <param name="functionCallContents">The function call contents representing the functions to be invoked.</param>
            <param name="iteration">The iteration number of how many roundtrips have been made to the inner client.</param>
            <param name="consecutiveErrorCount">The number of consecutive iterations, prior to this one, that were recorded as having function invocation errors.</param>
            <param name="isStreaming">Whether the function calls are being processed in a streaming context.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests.</param>
            <returns>A value indicating how the caller should proceed.</returns>
        </member>
        <member name="M:Microsoft.Extensions.AI.FunctionInvokingChatClient.UpdateConsecutiveErrorCountOrThrow(System.Collections.Generic.IList{Microsoft.Extensions.AI.ChatMessage},System.Int32@)">
            <summary>
            Updates the consecutive error count, and throws an exception if the count exceeds the maximum.
            </summary>
            <param name="added">Added messages.</param>
            <param name="consecutiveErrorCount">Consecutive error count.</param>
            <exception cref="T:System.AggregateException">Thrown if the maximum consecutive error count is exceeded.</exception>
        </member>
        <member name="M:Microsoft.Extensions.AI.FunctionInvokingChatClient.ThrowIfNoFunctionResultsAdded(System.Collections.Generic.IList{Microsoft.Extensions.AI.ChatMessage})">
            <summary>
            Throws an exception if <see cref="M:Microsoft.Extensions.AI.FunctionInvokingChatClient.CreateResponseMessages(System.ReadOnlySpan{Microsoft.Extensions.AI.FunctionInvokingChatClient.FunctionInvocationResult})"/> doesn't create any messages.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.AI.FunctionInvokingChatClient.ProcessFunctionCallAsync(System.Collections.Generic.List{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatOptions,System.Collections.Generic.List{Microsoft.Extensions.AI.FunctionCallContent},System.Int32,System.Int32,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>Processes the function call described in <paramref name="callContents"/>[<paramref name="iteration"/>].</summary>
            <param name="messages">The current chat contents, inclusive of the function call contents being processed.</param>
            <param name="options">The options used for the response being processed.</param>
            <param name="callContents">The function call contents representing all the functions being invoked.</param>
            <param name="iteration">The iteration number of how many roundtrips have been made to the inner client.</param>
            <param name="functionCallIndex">The 0-based index of the function being called out of <paramref name="callContents"/>.</param>
            <param name="captureExceptions">If true, handles function-invocation exceptions by returning a value with <see cref="F:Microsoft.Extensions.AI.FunctionInvokingChatClient.FunctionInvocationStatus.Exception"/>. Otherwise, rethrows.</param>
            <param name="isStreaming">Whether the function calls are being processed in a streaming context.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests.</param>
            <returns>A value indicating how the caller should proceed.</returns>
        </member>
        <member name="M:Microsoft.Extensions.AI.FunctionInvokingChatClient.CreateResponseMessages(System.ReadOnlySpan{Microsoft.Extensions.AI.FunctionInvokingChatClient.FunctionInvocationResult})">
            <summary>Creates one or more response messages for function invocation results.</summary>
            <param name="results">Information about the function call invocations and results.</param>
            <returns>A list of all chat messages created from <paramref name="results"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.AI.FunctionInvokingChatClient.InstrumentedInvokeFunctionAsync(Microsoft.Extensions.AI.FunctionInvocationContext,System.Threading.CancellationToken)">
            <summary>Invokes the function asynchronously.</summary>
            <param name="context">
            The function invocation context detailing the function to be invoked and its arguments along with additional request information.
            </param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>The result of the function invocation, or <see langword="null"/> if the function invocation returned <see langword="null"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="context"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Extensions.AI.FunctionInvokingChatClient.InvokeFunctionAsync(Microsoft.Extensions.AI.FunctionInvocationContext,System.Threading.CancellationToken)">
            <summary>This method will invoke the function within the try block.</summary>
            <param name="context">The function invocation context.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>The function result.</returns>
        </member>
        <member name="T:Microsoft.Extensions.AI.FunctionInvokingChatClient.FunctionInvocationResult">
            <summary>Provides information about the invocation of a function call.</summary>
        </member>
        <member name="M:Microsoft.Extensions.AI.FunctionInvokingChatClient.FunctionInvocationResult.#ctor(System.Boolean,Microsoft.Extensions.AI.FunctionInvokingChatClient.FunctionInvocationStatus,Microsoft.Extensions.AI.FunctionCallContent,System.Object,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.AI.FunctionInvokingChatClient.FunctionInvocationResult"/> class.
            </summary>
            <param name="terminate">Indicates whether the caller should terminate the processing loop.</param>
            <param name="status">Indicates the status of the function invocation.</param>
            <param name="callContent">Contains information about the function call.</param>
            <param name="result">The result of the function call.</param>
            <param name="exception">The exception thrown by the function call, if any.</param>
        </member>
        <member name="P:Microsoft.Extensions.AI.FunctionInvokingChatClient.FunctionInvocationResult.Status">
            <summary>Gets status about how the function invocation completed.</summary>
        </member>
        <member name="P:Microsoft.Extensions.AI.FunctionInvokingChatClient.FunctionInvocationResult.CallContent">
            <summary>Gets the function call content information associated with this invocation.</summary>
        </member>
        <member name="P:Microsoft.Extensions.AI.FunctionInvokingChatClient.FunctionInvocationResult.Result">
            <summary>Gets the result of the function call.</summary>
        </member>
        <member name="P:Microsoft.Extensions.AI.FunctionInvokingChatClient.FunctionInvocationResult.Exception">
            <summary>Gets any exception the function call threw.</summary>
        </member>
        <member name="P:Microsoft.Extensions.AI.FunctionInvokingChatClient.FunctionInvocationResult.Terminate">
            <summary>Gets a value indicating whether the caller should terminate the processing loop.</summary>
        </member>
        <member name="T:Microsoft.Extensions.AI.FunctionInvokingChatClient.FunctionInvocationStatus">
            <summary>Provides error codes for when errors occur as part of the function calling loop.</summary>
        </member>
        <member name="F:Microsoft.Extensions.AI.FunctionInvokingChatClient.FunctionInvocationStatus.RanToCompletion">
            <summary>The operation completed successfully.</summary>
        </member>
        <member name="F:Microsoft.Extensions.AI.FunctionInvokingChatClient.FunctionInvocationStatus.NotFound">
            <summary>The requested function could not be found.</summary>
        </member>
        <member name="F:Microsoft.Extensions.AI.FunctionInvokingChatClient.FunctionInvocationStatus.Exception">
            <summary>The function call failed with an exception.</summary>
        </member>
        <member name="T:Microsoft.Extensions.AI.FunctionInvokingChatClientBuilderExtensions">
            <summary>
            Provides extension methods for attaching a <see cref="T:Microsoft.Extensions.AI.FunctionInvokingChatClient"/> to a chat pipeline.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.AI.FunctionInvokingChatClientBuilderExtensions.UseFunctionInvocation(Microsoft.Extensions.AI.ChatClientBuilder,Microsoft.Extensions.Logging.ILoggerFactory,System.Action{Microsoft.Extensions.AI.FunctionInvokingChatClient})">
            <summary>
            Enables automatic function call invocation on the chat pipeline.
            </summary>
            <remarks>This works by adding an instance of <see cref="T:Microsoft.Extensions.AI.FunctionInvokingChatClient"/> with default options.</remarks>
            <param name="builder">The <see cref="T:Microsoft.Extensions.AI.ChatClientBuilder"/> being used to build the chat pipeline.</param>
            <param name="loggerFactory">An optional <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> to use to create a logger for logging function invocations.</param>
            <param name="configure">An optional callback that can be used to configure the <see cref="T:Microsoft.Extensions.AI.FunctionInvokingChatClient"/> instance.</param>
            <returns>The supplied <paramref name="builder"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="builder"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:Microsoft.Extensions.AI.LoggingChatClient">
            <summary>A delegating chat client that logs chat operations to an <see cref="T:Microsoft.Extensions.Logging.ILogger"/>.</summary>
            <remarks>
            <para>
            The provided implementation of <see cref="T:Microsoft.Extensions.AI.IChatClient"/> is thread-safe for concurrent use so long as the
            <see cref="T:Microsoft.Extensions.Logging.ILogger"/> employed is also thread-safe for concurrent use.
            </para>
            <para>
            When the employed <see cref="T:Microsoft.Extensions.Logging.ILogger"/> enables <see cref="F:Microsoft.Extensions.Logging.LogLevel.Trace"/>, the contents of
            chat messages and options are logged. These messages and options may contain sensitive application data.
            <see cref="F:Microsoft.Extensions.Logging.LogLevel.Trace"/> is disabled by default and should never be enabled in a production environment.
            Messages and options are not logged at other logging levels.
            </para>
            </remarks>
        </member>
        <member name="F:Microsoft.Extensions.AI.LoggingChatClient._logger">
            <summary>An <see cref="T:Microsoft.Extensions.Logging.ILogger"/> instance used for all logging.</summary>
        </member>
        <member name="F:Microsoft.Extensions.AI.LoggingChatClient._jsonSerializerOptions">
            <summary>The <see cref="P:Microsoft.Extensions.AI.LoggingChatClient.JsonSerializerOptions"/> to use for serialization of state written to the logger.</summary>
        </member>
        <member name="M:Microsoft.Extensions.AI.LoggingChatClient.#ctor(Microsoft.Extensions.AI.IChatClient,Microsoft.Extensions.Logging.ILogger)">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.Extensions.AI.LoggingChatClient"/> class.</summary>
            <param name="innerClient">The underlying <see cref="T:Microsoft.Extensions.AI.IChatClient"/>.</param>
            <param name="logger">An <see cref="T:Microsoft.Extensions.Logging.ILogger"/> instance that will be used for all logging.</param>
        </member>
        <member name="P:Microsoft.Extensions.AI.LoggingChatClient.JsonSerializerOptions">
            <summary>Gets or sets JSON serialization options to use when serializing logging data.</summary>
        </member>
        <member name="M:Microsoft.Extensions.AI.LoggingChatClient.GetResponseAsync(System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Extensions.AI.LoggingChatClient.GetStreamingResponseAsync(System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Extensions.AI.LoggingChatClientBuilderExtensions">
            <summary>Provides extensions for configuring <see cref="T:Microsoft.Extensions.AI.LoggingChatClient"/> instances.</summary>
        </member>
        <member name="M:Microsoft.Extensions.AI.LoggingChatClientBuilderExtensions.UseLogging(Microsoft.Extensions.AI.ChatClientBuilder,Microsoft.Extensions.Logging.ILoggerFactory,System.Action{Microsoft.Extensions.AI.LoggingChatClient})">
            <summary>Adds logging to the chat client pipeline.</summary>
            <param name="builder">The <see cref="T:Microsoft.Extensions.AI.ChatClientBuilder"/>.</param>
            <param name="loggerFactory">
            An optional <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> used to create a logger with which logging should be performed.
            If not supplied, a required instance will be resolved from the service provider.
            </param>
            <param name="configure">An optional callback that can be used to configure the <see cref="T:Microsoft.Extensions.AI.LoggingChatClient"/> instance.</param>
            <returns>The <paramref name="builder"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="builder"/> is <see langword="null"/>.</exception>
            <remarks>
            <para>
            When the employed <see cref="T:Microsoft.Extensions.Logging.ILogger"/> enables <see cref="F:Microsoft.Extensions.Logging.LogLevel.Trace"/>, the contents of
            chat messages and options are logged. These messages and options may contain sensitive application data.
            <see cref="F:Microsoft.Extensions.Logging.LogLevel.Trace"/> is disabled by default and should never be enabled in a production environment.
            Messages and options are not logged at other logging levels.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.Extensions.AI.OpenTelemetryChatClient">
            <summary>Represents a delegating chat client that implements the OpenTelemetry Semantic Conventions for Generative AI systems.</summary>
            <remarks>
            This class provides an implementation of the Semantic Conventions for Generative AI systems v1.34, defined at <see href="https://opentelemetry.io/docs/specs/semconv/gen-ai/" />.
            The specification is still experimental and subject to change; as such, the telemetry output by this client is also subject to change.
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.AI.OpenTelemetryChatClient.#ctor(Microsoft.Extensions.AI.IChatClient,Microsoft.Extensions.Logging.ILogger,System.String)">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.Extensions.AI.OpenTelemetryChatClient"/> class.</summary>
            <param name="innerClient">The underlying <see cref="T:Microsoft.Extensions.AI.IChatClient"/>.</param>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> to use for emitting events.</param>
            <param name="sourceName">An optional source name that will be used on the telemetry data.</param>
        </member>
        <member name="P:Microsoft.Extensions.AI.OpenTelemetryChatClient.JsonSerializerOptions">
            <summary>Gets or sets JSON serialization options to use when formatting chat data into telemetry strings.</summary>
        </member>
        <member name="M:Microsoft.Extensions.AI.OpenTelemetryChatClient.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Extensions.AI.OpenTelemetryChatClient.EnableSensitiveData">
            <summary>
            Gets or sets a value indicating whether potentially sensitive information should be included in telemetry.
            </summary>
            <value>
            <see langword="true"/> if potentially sensitive information should be included in telemetry;
            <see langword="false"/> if telemetry shouldn't include raw inputs and outputs.
            The default value is <see langword="false"/>.
            </value>
            <remarks>
            By default, telemetry includes metadata, such as token counts, but not raw inputs
            and outputs, such as message content, function call arguments, and function call results.
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.AI.OpenTelemetryChatClient.GetService(System.Type,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Extensions.AI.OpenTelemetryChatClient.GetResponseAsync(System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Extensions.AI.OpenTelemetryChatClient.GetStreamingResponseAsync(System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Extensions.AI.OpenTelemetryChatClient.CreateAndConfigureActivity(Microsoft.Extensions.AI.ChatOptions)">
            <summary>Creates an activity for a chat request, or returns <see langword="null"/> if not enabled.</summary>
        </member>
        <member name="M:Microsoft.Extensions.AI.OpenTelemetryChatClient.TraceResponse(System.Diagnostics.Activity,System.String,Microsoft.Extensions.AI.ChatResponse,System.Exception,System.Diagnostics.Stopwatch)">
            <summary>Adds chat response information to the activity.</summary>
        </member>
        <member name="P:Microsoft.Extensions.AI.OpenTelemetryChatClient.OtelContext.AssistantEvent">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.AI.OpenTelemetryChatClient.OtelContext.ChoiceEvent">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.AI.OpenTelemetryChatClient.OtelContext.SystemOrUserEvent">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.AI.OpenTelemetryChatClient.OtelContext.ToolCall">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.AI.OpenTelemetryChatClient.OtelContext.ToolCallArray">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.AI.OpenTelemetryChatClient.OtelContext.ToolCallFunction">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.AI.OpenTelemetryChatClient.OtelContext.ToolEvent">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.AI.OpenTelemetryChatClient.OtelContext.JsonNode">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.AI.OpenTelemetryChatClient.OtelContext.Int32">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.AI.OpenTelemetryChatClient.OtelContext.Object">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.AI.OpenTelemetryChatClient.OtelContext.String">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.AI.OpenTelemetryChatClient.OtelContext.Default">
            <summary>
            The default <see cref="T:System.Text.Json.Serialization.JsonSerializerContext"/> associated with a default <see cref="T:System.Text.Json.JsonSerializerOptions"/> instance.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.AI.OpenTelemetryChatClient.OtelContext.GeneratedSerializerOptions">
            <summary>
            The source-generated options associated with this context.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.AI.OpenTelemetryChatClient.OtelContext.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Extensions.AI.OpenTelemetryChatClient.OtelContext.#ctor(System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Extensions.AI.OpenTelemetryChatClient.OtelContext.GetTypeInfo(System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Extensions.AI.OpenTelemetryChatClientBuilderExtensions">
            <summary>Provides extensions for configuring <see cref="T:Microsoft.Extensions.AI.OpenTelemetryChatClient"/> instances.</summary>
        </member>
        <member name="M:Microsoft.Extensions.AI.OpenTelemetryChatClientBuilderExtensions.UseOpenTelemetry(Microsoft.Extensions.AI.ChatClientBuilder,Microsoft.Extensions.Logging.ILoggerFactory,System.String,System.Action{Microsoft.Extensions.AI.OpenTelemetryChatClient})">
            <summary>
            Adds OpenTelemetry support to the chat client pipeline, following the OpenTelemetry Semantic Conventions for Generative AI systems.
            </summary>
            <remarks>
            The draft specification this follows is available at <see href="https://opentelemetry.io/docs/specs/semconv/gen-ai/" />.
            The specification is still experimental and subject to change; as such, the telemetry output by this client is also subject to change.
            </remarks>
            <param name="builder">The <see cref="T:Microsoft.Extensions.AI.ChatClientBuilder"/>.</param>
            <param name="loggerFactory">An optional <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> to use to create a logger for logging events.</param>
            <param name="sourceName">An optional source name that will be used on the telemetry data.</param>
            <param name="configure">An optional callback that can be used to configure the <see cref="T:Microsoft.Extensions.AI.OpenTelemetryChatClient"/> instance.</param>
            <returns>The <paramref name="builder"/>.</returns>
        </member>
        <member name="T:Microsoft.Extensions.AI.AnonymousDelegatingEmbeddingGenerator`2">
            <summary>A delegating embedding generator that wraps an inner generator with implementations provided by delegates.</summary>
            <typeparam name="TInput">The type from which embeddings will be generated.</typeparam>
            <typeparam name="TEmbedding">The type of embeddings to generate.</typeparam>
        </member>
        <member name="F:Microsoft.Extensions.AI.AnonymousDelegatingEmbeddingGenerator`2._generateFunc">
            <summary>The delegate to use as the implementation of <see cref="M:Microsoft.Extensions.AI.AnonymousDelegatingEmbeddingGenerator`2.GenerateAsync(System.Collections.Generic.IEnumerable{`0},Microsoft.Extensions.AI.EmbeddingGenerationOptions,System.Threading.CancellationToken)"/>.</summary>
        </member>
        <member name="M:Microsoft.Extensions.AI.AnonymousDelegatingEmbeddingGenerator`2.#ctor(Microsoft.Extensions.AI.IEmbeddingGenerator{`0,`1},System.Func{System.Collections.Generic.IEnumerable{`0},Microsoft.Extensions.AI.EmbeddingGenerationOptions,Microsoft.Extensions.AI.IEmbeddingGenerator{`0,`1},System.Threading.CancellationToken,System.Threading.Tasks.Task{Microsoft.Extensions.AI.GeneratedEmbeddings{`1}}})">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.Extensions.AI.AnonymousDelegatingEmbeddingGenerator`2"/> class.</summary>
            <param name="innerGenerator">The inner generator.</param>
            <param name="generateFunc">A delegate that provides the implementation for <see cref="M:Microsoft.Extensions.AI.AnonymousDelegatingEmbeddingGenerator`2.GenerateAsync(System.Collections.Generic.IEnumerable{`0},Microsoft.Extensions.AI.EmbeddingGenerationOptions,System.Threading.CancellationToken)"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="innerGenerator"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="generateFunc"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Extensions.AI.AnonymousDelegatingEmbeddingGenerator`2.GenerateAsync(System.Collections.Generic.IEnumerable{`0},Microsoft.Extensions.AI.EmbeddingGenerationOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Extensions.AI.CachingEmbeddingGenerator`2">
            <summary>Represents a delegating embedding generator that caches the results of embedding generation calls.</summary>
            <typeparam name="TInput">The type from which embeddings will be generated.</typeparam>
            <typeparam name="TEmbedding">The type of embeddings to generate.</typeparam>
        </member>
        <member name="M:Microsoft.Extensions.AI.CachingEmbeddingGenerator`2.#ctor(Microsoft.Extensions.AI.IEmbeddingGenerator{`0,`1})">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.Extensions.AI.CachingEmbeddingGenerator`2"/> class.</summary>
            <param name="innerGenerator">The underlying <see cref="T:Microsoft.Extensions.AI.IEmbeddingGenerator`2"/>.</param>
        </member>
        <member name="M:Microsoft.Extensions.AI.CachingEmbeddingGenerator`2.GenerateAsync(System.Collections.Generic.IEnumerable{`0},Microsoft.Extensions.AI.EmbeddingGenerationOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Extensions.AI.CachingEmbeddingGenerator`2.GetCacheKey(System.ReadOnlySpan{System.Object})">
            <summary>Computes a cache key for the specified values.</summary>
            <param name="values">The values to inform the key.</param>
            <returns>The computed key.</returns>
        </member>
        <member name="M:Microsoft.Extensions.AI.CachingEmbeddingGenerator`2.ReadCacheAsync(System.String,System.Threading.CancellationToken)">
            <summary>Returns a previously cached <see cref="T:Microsoft.Extensions.AI.Embedding`1"/>, if available.</summary>
            <param name="key">The cache key.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests.</param>
            <returns>The previously cached data, if available, otherwise <see langword="null"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.AI.CachingEmbeddingGenerator`2.WriteCacheAsync(System.String,`1,System.Threading.CancellationToken)">
            <summary>Stores a <typeparamref name="TEmbedding"/> in the underlying cache.</summary>
            <param name="key">The cache key.</param>
            <param name="value">The <typeparamref name="TEmbedding"/> to be stored.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the completion of the operation.</returns>
        </member>
        <member name="T:Microsoft.Extensions.AI.ConfigureOptionsEmbeddingGenerator`2">
            <summary>Represents a delegating embedding generator that configures a <see cref="T:Microsoft.Extensions.AI.EmbeddingGenerationOptions"/> instance used by the remainder of the pipeline.</summary>
            <typeparam name="TInput">The type of the input passed to the generator.</typeparam>
            <typeparam name="TEmbedding">The type of the embedding instance produced by the generator.</typeparam>
        </member>
        <member name="F:Microsoft.Extensions.AI.ConfigureOptionsEmbeddingGenerator`2._configureOptions">
            <summary>The callback delegate used to configure options.</summary>
        </member>
        <member name="M:Microsoft.Extensions.AI.ConfigureOptionsEmbeddingGenerator`2.#ctor(Microsoft.Extensions.AI.IEmbeddingGenerator{`0,`1},System.Action{Microsoft.Extensions.AI.EmbeddingGenerationOptions})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.AI.ConfigureOptionsEmbeddingGenerator`2"/> class with the
            specified <paramref name="configure"/> callback.
            </summary>
            <param name="innerGenerator">The inner generator.</param>
            <param name="configure">
            The delegate to invoke to configure the <see cref="T:Microsoft.Extensions.AI.EmbeddingGenerationOptions"/> instance. It is passed a clone of the caller-supplied
            <see cref="T:Microsoft.Extensions.AI.EmbeddingGenerationOptions"/> instance (or a newly constructed instance if the caller-supplied instance is <see langword="null"/>).
            </param>
            <remarks>
            The <paramref name="configure"/> delegate is passed either a new instance of <see cref="T:Microsoft.Extensions.AI.EmbeddingGenerationOptions"/> if
            the caller didn't supply a <see cref="T:Microsoft.Extensions.AI.EmbeddingGenerationOptions"/> instance, or a clone (via <see cref="M:Microsoft.Extensions.AI.EmbeddingGenerationOptions.Clone"/> of the caller-supplied
            instance if one was supplied.
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.AI.ConfigureOptionsEmbeddingGenerator`2.GenerateAsync(System.Collections.Generic.IEnumerable{`0},Microsoft.Extensions.AI.EmbeddingGenerationOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Extensions.AI.ConfigureOptionsEmbeddingGenerator`2.Configure(Microsoft.Extensions.AI.EmbeddingGenerationOptions)">
            <summary>Creates and configures the <see cref="T:Microsoft.Extensions.AI.EmbeddingGenerationOptions"/> to pass along to the inner client.</summary>
        </member>
        <member name="T:Microsoft.Extensions.AI.ConfigureOptionsEmbeddingGeneratorBuilderExtensions">
            <summary>Provides extensions for configuring <see cref="T:Microsoft.Extensions.AI.ConfigureOptionsEmbeddingGenerator`2"/> instances.</summary>
        </member>
        <member name="M:Microsoft.Extensions.AI.ConfigureOptionsEmbeddingGeneratorBuilderExtensions.ConfigureOptions``2(Microsoft.Extensions.AI.EmbeddingGeneratorBuilder{``0,``1},System.Action{Microsoft.Extensions.AI.EmbeddingGenerationOptions})">
            <summary>
            Adds a callback that configures a <see cref="T:Microsoft.Extensions.AI.EmbeddingGenerationOptions"/> to be passed to the next client in the pipeline.
            </summary>
            <typeparam name="TInput">The type of the input passed to the generator.</typeparam>
            <typeparam name="TEmbedding">The type of the embedding instance produced by the generator.</typeparam>
            <param name="builder">The <see cref="T:Microsoft.Extensions.AI.EmbeddingGeneratorBuilder`2"/>.</param>
            <param name="configure">
            The delegate to invoke to configure the <see cref="T:Microsoft.Extensions.AI.EmbeddingGenerationOptions"/> instance. It is passed a clone of the caller-supplied
            <see cref="T:Microsoft.Extensions.AI.EmbeddingGenerationOptions"/> instance (or a new constructed instance if the caller-supplied instance is <see langword="null"/>).
            </param>
            <remarks>
            This can be used to set default options. The <paramref name="configure"/> delegate is passed either a new instance of
            <see cref="T:Microsoft.Extensions.AI.EmbeddingGenerationOptions"/> if the caller didn't supply a <see cref="T:Microsoft.Extensions.AI.EmbeddingGenerationOptions"/> instance, or
            a clone (via <see cref="M:Microsoft.Extensions.AI.EmbeddingGenerationOptions.Clone"/>
            of the caller-supplied instance if one was supplied.
            </remarks>
            <returns>The <paramref name="builder"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="builder"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="configure"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:Microsoft.Extensions.AI.DistributedCachingEmbeddingGenerator`2">
            <summary>
            Represents a delegating embedding generator that caches the results of embedding generation calls,
            storing them as JSON in an <see cref="T:Microsoft.Extensions.Caching.Distributed.IDistributedCache"/>.
            </summary>
            <typeparam name="TInput">The type from which embeddings will be generated.</typeparam>
            <typeparam name="TEmbedding">The type of embeddings to generate.</typeparam>
            <remarks>
            The provided implementation of <see cref="T:Microsoft.Extensions.AI.IEmbeddingGenerator`2"/> is thread-safe for concurrent
            use so long as the employed <see cref="T:Microsoft.Extensions.Caching.Distributed.IDistributedCache"/> is similarly thread-safe for concurrent use.
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.AI.DistributedCachingEmbeddingGenerator`2.#ctor(Microsoft.Extensions.AI.IEmbeddingGenerator{`0,`1},Microsoft.Extensions.Caching.Distributed.IDistributedCache)">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.Extensions.AI.DistributedCachingEmbeddingGenerator`2"/> class.</summary>
            <param name="innerGenerator">The underlying <see cref="T:Microsoft.Extensions.AI.IEmbeddingGenerator`2"/>.</param>
            <param name="storage">A <see cref="T:Microsoft.Extensions.Caching.Distributed.IDistributedCache"/> instance that will be used as the backing store for the cache.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="storage"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:Microsoft.Extensions.AI.DistributedCachingEmbeddingGenerator`2.JsonSerializerOptions">
            <summary>Gets or sets JSON serialization options to use when serializing cache data.</summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Extensions.AI.DistributedCachingEmbeddingGenerator`2.ReadCacheAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Extensions.AI.DistributedCachingEmbeddingGenerator`2.WriteCacheAsync(System.String,`1,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Extensions.AI.DistributedCachingEmbeddingGenerator`2.GetCacheKey(System.ReadOnlySpan{System.Object})">
            <summary>Computes a cache key for the specified values.</summary>
            <param name="values">The values to inform the key.</param>
            <returns>The computed key.</returns>
            <remarks>
            <para>
            The <paramref name="values"/> are serialized to JSON using <see cref="P:Microsoft.Extensions.AI.DistributedCachingEmbeddingGenerator`2.JsonSerializerOptions"/> in order to compute the key.
            </para>
            <para>
            The generated cache key is not guaranteed to be stable across releases of the library.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.Extensions.AI.DistributedCachingEmbeddingGeneratorBuilderExtensions">
            <summary>
            Extension methods for adding a <see cref="T:Microsoft.Extensions.AI.DistributedCachingEmbeddingGenerator`2"/> to an
            <see cref="T:Microsoft.Extensions.AI.IEmbeddingGenerator`2"/> pipeline.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.AI.DistributedCachingEmbeddingGeneratorBuilderExtensions.UseDistributedCache``2(Microsoft.Extensions.AI.EmbeddingGeneratorBuilder{``0,``1},Microsoft.Extensions.Caching.Distributed.IDistributedCache,System.Action{Microsoft.Extensions.AI.DistributedCachingEmbeddingGenerator{``0,``1}})">
            <summary>
            Adds a <see cref="T:Microsoft.Extensions.AI.DistributedCachingEmbeddingGenerator`2"/> as the next stage in the pipeline.
            </summary>
            <typeparam name="TInput">The type from which embeddings will be generated.</typeparam>
            <typeparam name="TEmbedding">The type of embeddings to generate.</typeparam>
            <param name="builder">The <see cref="T:Microsoft.Extensions.AI.EmbeddingGeneratorBuilder`2"/>.</param>
            <param name="storage">
            An optional <see cref="T:Microsoft.Extensions.Caching.Distributed.IDistributedCache"/> instance that will be used as the backing store for the cache. If not supplied, an instance will be resolved from the service provider.
            </param>
            <param name="configure">An optional callback that can be used to configure the <see cref="T:Microsoft.Extensions.AI.DistributedCachingEmbeddingGenerator`2"/> instance.</param>
            <returns>The <see cref="T:Microsoft.Extensions.AI.EmbeddingGeneratorBuilder`2"/> provided as <paramref name="builder"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="builder"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:Microsoft.Extensions.AI.EmbeddingGeneratorBuilder`2">
            <summary>A builder for creating pipelines of <see cref="T:Microsoft.Extensions.AI.IEmbeddingGenerator`2"/>.</summary>
            <typeparam name="TInput">The type from which embeddings will be generated.</typeparam>
            <typeparam name="TEmbedding">The type of embeddings to generate.</typeparam>
        </member>
        <member name="F:Microsoft.Extensions.AI.EmbeddingGeneratorBuilder`2._generatorFactories">
            <summary>The registered client factory instances.</summary>
        </member>
        <member name="M:Microsoft.Extensions.AI.EmbeddingGeneratorBuilder`2.#ctor(Microsoft.Extensions.AI.IEmbeddingGenerator{`0,`1})">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.Extensions.AI.EmbeddingGeneratorBuilder`2"/> class.</summary>
            <param name="innerGenerator">The inner <see cref="T:Microsoft.Extensions.AI.EmbeddingGeneratorBuilder`2"/> that represents the underlying backend.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="innerGenerator"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Extensions.AI.EmbeddingGeneratorBuilder`2.#ctor(System.Func{System.IServiceProvider,Microsoft.Extensions.AI.IEmbeddingGenerator{`0,`1}})">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.Extensions.AI.EmbeddingGeneratorBuilder`2"/> class.</summary>
            <param name="innerGeneratorFactory">A callback that produces the inner <see cref="T:Microsoft.Extensions.AI.EmbeddingGeneratorBuilder`2"/> that represents the underlying backend.</param>
        </member>
        <member name="M:Microsoft.Extensions.AI.EmbeddingGeneratorBuilder`2.Build(System.IServiceProvider)">
            <summary>
            Builds an <see cref="T:Microsoft.Extensions.AI.IEmbeddingGenerator`2"/> that represents the entire pipeline. Calls to this instance will pass through each of the pipeline stages in turn.
            </summary>
            <param name="services">
            The <see cref="T:System.IServiceProvider"/> that should provide services to the <see cref="T:Microsoft.Extensions.AI.IEmbeddingGenerator`2"/> instances.
            If <see langword="null"/>, an empty <see cref="T:System.IServiceProvider"/> will be used.
            </param>
            <returns>An instance of <see cref="T:Microsoft.Extensions.AI.IEmbeddingGenerator`2"/> that represents the entire pipeline.</returns>
        </member>
        <member name="M:Microsoft.Extensions.AI.EmbeddingGeneratorBuilder`2.Use(System.Func{Microsoft.Extensions.AI.IEmbeddingGenerator{`0,`1},Microsoft.Extensions.AI.IEmbeddingGenerator{`0,`1}})">
            <summary>Adds a factory for an intermediate embedding generator to the embedding generator pipeline.</summary>
            <param name="generatorFactory">The generator factory function.</param>
            <returns>The updated <see cref="T:Microsoft.Extensions.AI.EmbeddingGeneratorBuilder`2"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="generatorFactory"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Extensions.AI.EmbeddingGeneratorBuilder`2.Use(System.Func{Microsoft.Extensions.AI.IEmbeddingGenerator{`0,`1},System.IServiceProvider,Microsoft.Extensions.AI.IEmbeddingGenerator{`0,`1}})">
            <summary>Adds a factory for an intermediate embedding generator to the embedding generator pipeline.</summary>
            <param name="generatorFactory">The generator factory function.</param>
            <returns>The updated <see cref="T:Microsoft.Extensions.AI.EmbeddingGeneratorBuilder`2"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="generatorFactory"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Extensions.AI.EmbeddingGeneratorBuilder`2.Use(System.Func{System.Collections.Generic.IEnumerable{`0},Microsoft.Extensions.AI.EmbeddingGenerationOptions,Microsoft.Extensions.AI.IEmbeddingGenerator{`0,`1},System.Threading.CancellationToken,System.Threading.Tasks.Task{Microsoft.Extensions.AI.GeneratedEmbeddings{`1}}})">
            <summary>
            Adds to the embedding generator pipeline an anonymous delegating embedding generator based on a delegate that provides
            an implementation for <see cref="M:Microsoft.Extensions.AI.IEmbeddingGenerator`2.GenerateAsync(System.Collections.Generic.IEnumerable{`0},Microsoft.Extensions.AI.EmbeddingGenerationOptions,System.Threading.CancellationToken)"/>.
            </summary>
            <param name="generateFunc">
            A delegate that provides the implementation for <see cref="M:Microsoft.Extensions.AI.IEmbeddingGenerator`2.GenerateAsync(System.Collections.Generic.IEnumerable{`0},Microsoft.Extensions.AI.EmbeddingGenerationOptions,System.Threading.CancellationToken)"/>.
            </param>
            <returns>The updated <see cref="T:Microsoft.Extensions.AI.EmbeddingGeneratorBuilder`2"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="generateFunc"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:Microsoft.Extensions.AI.EmbeddingGeneratorBuilderEmbeddingGeneratorExtensions">
            <summary>Provides extension methods for working with <see cref="T:Microsoft.Extensions.AI.IEmbeddingGenerator`2"/>
            in the context of <see cref="T:Microsoft.Extensions.AI.EmbeddingGeneratorBuilder`2"/>.</summary>
        </member>
        <member name="M:Microsoft.Extensions.AI.EmbeddingGeneratorBuilderEmbeddingGeneratorExtensions.AsBuilder``2(Microsoft.Extensions.AI.IEmbeddingGenerator{``0,``1})">
            <summary>
            Creates a new <see cref="T:Microsoft.Extensions.AI.EmbeddingGeneratorBuilder`2"/> using
            <paramref name="innerGenerator"/> as its inner generator.
            </summary>
            <typeparam name="TInput">The type from which embeddings will be generated.</typeparam>
            <typeparam name="TEmbedding">The type of embeddings to generate.</typeparam>
            <param name="innerGenerator">The generator to use as the inner generator.</param>
            <returns>The new <see cref="T:Microsoft.Extensions.AI.EmbeddingGeneratorBuilder`2"/> instance.</returns>
            <remarks>
            This method is equivalent to using the <see cref="T:Microsoft.Extensions.AI.EmbeddingGeneratorBuilder`2"/>
            constructor directly, specifying <paramref name="innerGenerator"/> as the inner generator.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="innerGenerator"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:Microsoft.Extensions.AI.LoggingEmbeddingGenerator`2">
            <summary>A delegating embedding generator that logs embedding generation operations to an <see cref="T:Microsoft.Extensions.Logging.ILogger"/>.</summary>
            <typeparam name="TInput">Specifies the type of the input passed to the generator.</typeparam>
            <typeparam name="TEmbedding">Specifies the type of the embedding instance produced by the generator.</typeparam>
            <remarks>
            <para>
            The provided implementation of <see cref="T:Microsoft.Extensions.AI.IEmbeddingGenerator`2"/> is thread-safe for concurrent use
            so long as the <see cref="T:Microsoft.Extensions.Logging.ILogger"/> employed is also thread-safe for concurrent use.
            </para>
            <para>
            When the employed <see cref="T:Microsoft.Extensions.Logging.ILogger"/> enables <see cref="F:Microsoft.Extensions.Logging.LogLevel.Trace"/>, the contents of
            values and options are logged. These values and options may contain sensitive application data.
            <see cref="F:Microsoft.Extensions.Logging.LogLevel.Trace"/> is disabled by default and should never be enabled in a production environment.
            Messages and options are not logged at other logging levels.
            </para>
            </remarks>
        </member>
        <member name="F:Microsoft.Extensions.AI.LoggingEmbeddingGenerator`2._logger">
            <summary>An <see cref="T:Microsoft.Extensions.Logging.ILogger"/> instance used for all logging.</summary>
        </member>
        <member name="F:Microsoft.Extensions.AI.LoggingEmbeddingGenerator`2._jsonSerializerOptions">
            <summary>The <see cref="P:Microsoft.Extensions.AI.LoggingEmbeddingGenerator`2.JsonSerializerOptions"/> to use for serialization of state written to the logger.</summary>
        </member>
        <member name="M:Microsoft.Extensions.AI.LoggingEmbeddingGenerator`2.#ctor(Microsoft.Extensions.AI.IEmbeddingGenerator{`0,`1},Microsoft.Extensions.Logging.ILogger)">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.Extensions.AI.LoggingEmbeddingGenerator`2"/> class.</summary>
            <param name="innerGenerator">The underlying <see cref="T:Microsoft.Extensions.AI.IEmbeddingGenerator`2"/>.</param>
            <param name="logger">An <see cref="T:Microsoft.Extensions.Logging.ILogger"/> instance that will be used for all logging.</param>
        </member>
        <member name="P:Microsoft.Extensions.AI.LoggingEmbeddingGenerator`2.JsonSerializerOptions">
            <summary>Gets or sets JSON serialization options to use when serializing logging data.</summary>
        </member>
        <member name="M:Microsoft.Extensions.AI.LoggingEmbeddingGenerator`2.GenerateAsync(System.Collections.Generic.IEnumerable{`0},Microsoft.Extensions.AI.EmbeddingGenerationOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Extensions.AI.LoggingEmbeddingGeneratorBuilderExtensions">
            <summary>Provides extensions for configuring <see cref="T:Microsoft.Extensions.AI.LoggingEmbeddingGenerator`2"/> instances.</summary>
        </member>
        <member name="M:Microsoft.Extensions.AI.LoggingEmbeddingGeneratorBuilderExtensions.UseLogging``2(Microsoft.Extensions.AI.EmbeddingGeneratorBuilder{``0,``1},Microsoft.Extensions.Logging.ILoggerFactory,System.Action{Microsoft.Extensions.AI.LoggingEmbeddingGenerator{``0,``1}})">
            <summary>Adds logging to the embedding generator pipeline.</summary>
            <typeparam name="TInput">Specifies the type of the input passed to the generator.</typeparam>
            <typeparam name="TEmbedding">Specifies the type of the embedding instance produced by the generator.</typeparam>
            <param name="builder">The <see cref="T:Microsoft.Extensions.AI.EmbeddingGeneratorBuilder`2"/>.</param>
            <param name="loggerFactory">
            An optional <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> used to create a logger with which logging should be performed.
            If not supplied, a required instance will be resolved from the service provider.
            </param>
            <param name="configure">An optional callback that can be used to configure the <see cref="T:Microsoft.Extensions.AI.LoggingEmbeddingGenerator`2"/> instance.</param>
            <returns>The <paramref name="builder"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="builder"/> is <see langword="null"/>.</exception>
            <remarks>
            <para>
            When the employed <see cref="T:Microsoft.Extensions.Logging.ILogger"/> enables <see cref="F:Microsoft.Extensions.Logging.LogLevel.Trace"/>, the contents of
            values and options are logged. These values and options may contain sensitive application data.
            <see cref="F:Microsoft.Extensions.Logging.LogLevel.Trace"/> is disabled by default and should never be enabled in a production environment.
            Messages and options are not logged at other logging levels.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.Extensions.AI.OpenTelemetryEmbeddingGenerator`2">
            <summary>Represents a delegating embedding generator that implements the OpenTelemetry Semantic Conventions for Generative AI systems.</summary>
            <remarks>
            This class provides an implementation of the Semantic Conventions for Generative AI systems v1.34, defined at <see href="https://opentelemetry.io/docs/specs/semconv/gen-ai/" />.
            The specification is still experimental and subject to change; as such, the telemetry output by this client is also subject to change.
            </remarks>
            <typeparam name="TInput">The type of input used to produce embeddings.</typeparam>
            <typeparam name="TEmbedding">The type of embedding generated.</typeparam>
        </member>
        <member name="M:Microsoft.Extensions.AI.OpenTelemetryEmbeddingGenerator`2.#ctor(Microsoft.Extensions.AI.IEmbeddingGenerator{`0,`1},Microsoft.Extensions.Logging.ILogger,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.AI.OpenTelemetryEmbeddingGenerator`2"/> class.
            </summary>
            <param name="innerGenerator">The underlying <see cref="T:Microsoft.Extensions.AI.IEmbeddingGenerator`2"/>, which is the next stage of the pipeline.</param>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> to use for emitting events.</param>
            <param name="sourceName">An optional source name that will be used on the telemetry data.</param>
        </member>
        <member name="P:Microsoft.Extensions.AI.OpenTelemetryEmbeddingGenerator`2.EnableSensitiveData">
            <summary>
            Gets or sets a value indicating whether potentially sensitive information should be included in telemetry.
            </summary>
            <value>
            <see langword="true"/> if potentially sensitive information should be included in telemetry;
            <see langword="false"/> if telemetry shouldn't include raw inputs and outputs.
            The default value is <see langword="false"/>.
            </value>
            <remarks>
            By default, telemetry includes metadata, such as token counts, but not raw inputs
            and outputs or additional options data.
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.AI.OpenTelemetryEmbeddingGenerator`2.GetService(System.Type,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Extensions.AI.OpenTelemetryEmbeddingGenerator`2.GenerateAsync(System.Collections.Generic.IEnumerable{`0},Microsoft.Extensions.AI.EmbeddingGenerationOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Extensions.AI.OpenTelemetryEmbeddingGenerator`2.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Extensions.AI.OpenTelemetryEmbeddingGenerator`2.CreateAndConfigureActivity(Microsoft.Extensions.AI.EmbeddingGenerationOptions)">
            <summary>Creates an activity for an embedding generation request, or returns <see langword="null"/> if not enabled.</summary>
        </member>
        <member name="M:Microsoft.Extensions.AI.OpenTelemetryEmbeddingGenerator`2.TraceResponse(System.Diagnostics.Activity,System.String,Microsoft.Extensions.AI.GeneratedEmbeddings{`1},System.Exception,System.Diagnostics.Stopwatch)">
            <summary>Adds embedding generation response information to the activity.</summary>
        </member>
        <member name="T:Microsoft.Extensions.AI.OpenTelemetryEmbeddingGeneratorBuilderExtensions">
            <summary>Provides extensions for configuring <see cref="T:Microsoft.Extensions.AI.OpenTelemetryEmbeddingGenerator`2"/> instances.</summary>
        </member>
        <member name="M:Microsoft.Extensions.AI.OpenTelemetryEmbeddingGeneratorBuilderExtensions.UseOpenTelemetry``2(Microsoft.Extensions.AI.EmbeddingGeneratorBuilder{``0,``1},Microsoft.Extensions.Logging.ILoggerFactory,System.String,System.Action{Microsoft.Extensions.AI.OpenTelemetryEmbeddingGenerator{``0,``1}})">
            <summary>
            Adds OpenTelemetry support to the embedding generator pipeline, following the OpenTelemetry Semantic Conventions for Generative AI systems.
            </summary>
            <remarks>
            The draft specification this follows is available at <see href="https://opentelemetry.io/docs/specs/semconv/gen-ai/" />.
            The specification is still experimental and subject to change; as such, the telemetry output by this generator is also subject to change.
            </remarks>
            <typeparam name="TInput">The type of input used to produce embeddings.</typeparam>
            <typeparam name="TEmbedding">The type of embedding generated.</typeparam>
            <param name="builder">The <see cref="T:Microsoft.Extensions.AI.EmbeddingGeneratorBuilder`2"/>.</param>
            <param name="loggerFactory">An optional <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> to use to create a logger for logging events.</param>
            <param name="sourceName">An optional source name that will be used on the telemetry data.</param>
            <param name="configure">An optional callback that can be used to configure the <see cref="T:Microsoft.Extensions.AI.OpenTelemetryEmbeddingGenerator`2"/> instance.</param>
            <returns>The <paramref name="builder"/>.</returns>
        </member>
        <member name="T:Microsoft.Extensions.AI.EmptyServiceProvider">
            <summary>Provides an implementation of <see cref="T:System.IServiceProvider"/> that contains no services.</summary>
        </member>
        <member name="P:Microsoft.Extensions.AI.EmptyServiceProvider.Instance">
            <summary>Gets a singleton instance of <see cref="T:Microsoft.Extensions.AI.EmptyServiceProvider"/>.</summary>
        </member>
        <member name="M:Microsoft.Extensions.AI.EmptyServiceProvider.GetService(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Extensions.AI.EmptyServiceProvider.GetKeyedService(System.Type,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Extensions.AI.EmptyServiceProvider.GetRequiredKeyedService(System.Type,System.Object)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.Extensions.AI.LoggingHelpers">
            <summary>Provides internal helpers for implementing logging.</summary>
        </member>
        <member name="M:Microsoft.Extensions.AI.LoggingHelpers.AsJson``1(``0,System.Text.Json.JsonSerializerOptions)">
            <summary>Serializes <paramref name="value"/> as JSON for logging purposes.</summary>
        </member>
        <member name="T:Microsoft.Extensions.AI.OpenTelemetryConsts">
            <summary>Provides constants used by various telemetry services.</summary>
        </member>
        <member name="T:Microsoft.Extensions.AI.ConfigureOptionsSpeechToTextClient">
            <summary>Represents a delegating chat client that configures a <see cref="T:Microsoft.Extensions.AI.SpeechToTextOptions"/> instance used by the remainder of the pipeline.</summary>
        </member>
        <member name="F:Microsoft.Extensions.AI.ConfigureOptionsSpeechToTextClient._configureOptions">
            <summary>The callback delegate used to configure options.</summary>
        </member>
        <member name="M:Microsoft.Extensions.AI.ConfigureOptionsSpeechToTextClient.#ctor(Microsoft.Extensions.AI.ISpeechToTextClient,System.Action{Microsoft.Extensions.AI.SpeechToTextOptions})">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.Extensions.AI.ConfigureOptionsSpeechToTextClient"/> class with the specified <paramref name="configure"/> callback.</summary>
            <param name="innerClient">The inner client.</param>
            <param name="configure">
            The delegate to invoke to configure the <see cref="T:Microsoft.Extensions.AI.SpeechToTextOptions"/> instance. It is passed a clone of the caller-supplied <see cref="T:Microsoft.Extensions.AI.SpeechToTextOptions"/> instance
            (or a newly constructed instance if the caller-supplied instance is <see langword="null"/>).
            </param>
            <remarks>
            The <paramref name="configure"/> delegate is passed either a new instance of <see cref="T:Microsoft.Extensions.AI.SpeechToTextOptions"/> if
            the caller didn't supply a <see cref="T:Microsoft.Extensions.AI.SpeechToTextOptions"/> instance, or a clone (via <see cref="M:Microsoft.Extensions.AI.SpeechToTextOptions.Clone"/> of the caller-supplied
            instance if one was supplied.
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.AI.ConfigureOptionsSpeechToTextClient.GetTextAsync(System.IO.Stream,Microsoft.Extensions.AI.SpeechToTextOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Extensions.AI.ConfigureOptionsSpeechToTextClient.GetStreamingTextAsync(System.IO.Stream,Microsoft.Extensions.AI.SpeechToTextOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Extensions.AI.ConfigureOptionsSpeechToTextClient.Configure(Microsoft.Extensions.AI.SpeechToTextOptions)">
            <summary>Creates and configures the <see cref="T:Microsoft.Extensions.AI.SpeechToTextOptions"/> to pass along to the inner client.</summary>
        </member>
        <member name="T:Microsoft.Extensions.AI.ConfigureOptionsSpeechToTextClientBuilderExtensions">
            <summary>Provides extensions for configuring <see cref="T:Microsoft.Extensions.AI.ConfigureOptionsSpeechToTextClient"/> instances.</summary>
        </member>
        <member name="M:Microsoft.Extensions.AI.ConfigureOptionsSpeechToTextClientBuilderExtensions.ConfigureOptions(Microsoft.Extensions.AI.SpeechToTextClientBuilder,System.Action{Microsoft.Extensions.AI.SpeechToTextOptions})">
            <summary>
            Adds a callback that configures a <see cref="T:Microsoft.Extensions.AI.SpeechToTextOptions"/> to be passed to the next client in the pipeline.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.Extensions.AI.SpeechToTextClientBuilder"/>.</param>
            <param name="configure">
            The delegate to invoke to configure the <see cref="T:Microsoft.Extensions.AI.SpeechToTextOptions"/> instance.
            It is passed a clone of the caller-supplied <see cref="T:Microsoft.Extensions.AI.SpeechToTextOptions"/> instance (or a newly constructed instance if the caller-supplied instance is <see langword="null"/>).
            </param>
            <remarks>
            This method can be used to set default options. The <paramref name="configure"/> delegate is passed either a new instance of
            <see cref="T:Microsoft.Extensions.AI.SpeechToTextOptions"/> if the caller didn't supply a <see cref="T:Microsoft.Extensions.AI.SpeechToTextOptions"/> instance, or a clone (via <see cref="M:Microsoft.Extensions.AI.SpeechToTextOptions.Clone"/>)
            of the caller-supplied instance if one was supplied.
            </remarks>
            <returns>The <paramref name="builder"/>.</returns>
        </member>
        <member name="T:Microsoft.Extensions.AI.LoggingSpeechToTextClient">
            <summary>A delegating speech to text client that logs speech to text operations to an <see cref="T:Microsoft.Extensions.Logging.ILogger"/>.</summary>
            <remarks>
            <para>
            The provided implementation of <see cref="T:Microsoft.Extensions.AI.ISpeechToTextClient"/> is thread-safe for concurrent use so long as the
            <see cref="T:Microsoft.Extensions.Logging.ILogger"/> employed is also thread-safe for concurrent use.
            </para>
            <para>
            When the employed <see cref="T:Microsoft.Extensions.Logging.ILogger"/> enables <see cref="F:Microsoft.Extensions.Logging.LogLevel.Trace"/>, the contents of
            messages and options are logged. These messages and options may contain sensitive application data.
            <see cref="F:Microsoft.Extensions.Logging.LogLevel.Trace"/> is disabled by default and should never be enabled in a production environment.
            Messages and options are not logged at other logging levels.
            </para>
            </remarks>
        </member>
        <member name="F:Microsoft.Extensions.AI.LoggingSpeechToTextClient._logger">
            <summary>An <see cref="T:Microsoft.Extensions.Logging.ILogger"/> instance used for all logging.</summary>
        </member>
        <member name="F:Microsoft.Extensions.AI.LoggingSpeechToTextClient._jsonSerializerOptions">
            <summary>The <see cref="P:Microsoft.Extensions.AI.LoggingSpeechToTextClient.JsonSerializerOptions"/> to use for serialization of state written to the logger.</summary>
        </member>
        <member name="M:Microsoft.Extensions.AI.LoggingSpeechToTextClient.#ctor(Microsoft.Extensions.AI.ISpeechToTextClient,Microsoft.Extensions.Logging.ILogger)">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.Extensions.AI.LoggingSpeechToTextClient"/> class.</summary>
            <param name="innerClient">The underlying <see cref="T:Microsoft.Extensions.AI.ISpeechToTextClient"/>.</param>
            <param name="logger">An <see cref="T:Microsoft.Extensions.Logging.ILogger"/> instance that will be used for all logging.</param>
        </member>
        <member name="P:Microsoft.Extensions.AI.LoggingSpeechToTextClient.JsonSerializerOptions">
            <summary>Gets or sets JSON serialization options to use when serializing logging data.</summary>
        </member>
        <member name="M:Microsoft.Extensions.AI.LoggingSpeechToTextClient.GetTextAsync(System.IO.Stream,Microsoft.Extensions.AI.SpeechToTextOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Extensions.AI.LoggingSpeechToTextClient.GetStreamingTextAsync(System.IO.Stream,Microsoft.Extensions.AI.SpeechToTextOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Extensions.AI.LoggingSpeechToTextClientBuilderExtensions">
            <summary>Provides extensions for configuring <see cref="T:Microsoft.Extensions.AI.LoggingSpeechToTextClient"/> instances.</summary>
        </member>
        <member name="M:Microsoft.Extensions.AI.LoggingSpeechToTextClientBuilderExtensions.UseLogging(Microsoft.Extensions.AI.SpeechToTextClientBuilder,Microsoft.Extensions.Logging.ILoggerFactory,System.Action{Microsoft.Extensions.AI.LoggingSpeechToTextClient})">
            <summary>Adds logging to the audio transcription client pipeline.</summary>
            <param name="builder">The <see cref="T:Microsoft.Extensions.AI.SpeechToTextClientBuilder"/>.</param>
            <param name="loggerFactory">
            An optional <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> used to create a logger with which logging should be performed.
            If not supplied, a required instance will be resolved from the service provider.
            </param>
            <param name="configure">An optional callback that can be used to configure the <see cref="T:Microsoft.Extensions.AI.LoggingSpeechToTextClient"/> instance.</param>
            <returns>The <paramref name="builder"/>.</returns>
            <remarks>
            <para>
            When the employed <see cref="T:Microsoft.Extensions.Logging.ILogger"/> enables <see cref="F:Microsoft.Extensions.Logging.LogLevel.Trace"/>, the contents of
            messages and options are logged. These messages and options may contain sensitive application data.
            <see cref="F:Microsoft.Extensions.Logging.LogLevel.Trace"/> is disabled by default and should never be enabled in a production environment.
            Messages and options are not logged at other logging levels.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.Extensions.AI.SpeechToTextClientBuilder">
            <summary>A builder for creating pipelines of <see cref="T:Microsoft.Extensions.AI.ISpeechToTextClient"/>.</summary>
        </member>
        <member name="F:Microsoft.Extensions.AI.SpeechToTextClientBuilder._clientFactories">
            <summary>The registered client factory instances.</summary>
        </member>
        <member name="M:Microsoft.Extensions.AI.SpeechToTextClientBuilder.#ctor(Microsoft.Extensions.AI.ISpeechToTextClient)">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.Extensions.AI.SpeechToTextClientBuilder"/> class.</summary>
            <param name="innerClient">The inner <see cref="T:Microsoft.Extensions.AI.ISpeechToTextClient"/> that represents the underlying backend.</param>
        </member>
        <member name="M:Microsoft.Extensions.AI.SpeechToTextClientBuilder.#ctor(System.Func{System.IServiceProvider,Microsoft.Extensions.AI.ISpeechToTextClient})">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.Extensions.AI.SpeechToTextClientBuilder"/> class.</summary>
            <param name="innerClientFactory">A callback that produces the inner <see cref="T:Microsoft.Extensions.AI.ISpeechToTextClient"/> that represents the underlying backend.</param>
        </member>
        <member name="M:Microsoft.Extensions.AI.SpeechToTextClientBuilder.Build(System.IServiceProvider)">
            <summary>Builds an <see cref="T:Microsoft.Extensions.AI.ISpeechToTextClient"/> that represents the entire pipeline. Calls to this instance will pass through each of the pipeline stages in turn.</summary>
            <param name="services">
            The <see cref="T:System.IServiceProvider"/> that should provide services to the <see cref="T:Microsoft.Extensions.AI.ISpeechToTextClient"/> instances.
            If null, an empty <see cref="T:System.IServiceProvider"/> will be used.
            </param>
            <returns>An instance of <see cref="T:Microsoft.Extensions.AI.ISpeechToTextClient"/> that represents the entire pipeline.</returns>
        </member>
        <member name="M:Microsoft.Extensions.AI.SpeechToTextClientBuilder.Use(System.Func{Microsoft.Extensions.AI.ISpeechToTextClient,Microsoft.Extensions.AI.ISpeechToTextClient})">
            <summary>Adds a factory for an intermediate audio transcription client to the audio transcription client pipeline.</summary>
            <param name="clientFactory">The client factory function.</param>
            <returns>The updated <see cref="T:Microsoft.Extensions.AI.SpeechToTextClientBuilder"/> instance.</returns>
        </member>
        <member name="M:Microsoft.Extensions.AI.SpeechToTextClientBuilder.Use(System.Func{Microsoft.Extensions.AI.ISpeechToTextClient,System.IServiceProvider,Microsoft.Extensions.AI.ISpeechToTextClient})">
            <summary>Adds a factory for an intermediate audio transcription client to the audio transcription client pipeline.</summary>
            <param name="clientFactory">The client factory function.</param>
            <returns>The updated <see cref="T:Microsoft.Extensions.AI.SpeechToTextClientBuilder"/> instance.</returns>
        </member>
        <member name="T:Microsoft.Extensions.AI.SpeechToTextClientBuilderSpeechToTextClientExtensions">
            <summary>Provides extension methods for working with <see cref="T:Microsoft.Extensions.AI.ISpeechToTextClient"/> in the context of <see cref="T:Microsoft.Extensions.AI.SpeechToTextClientBuilder"/>.</summary>
        </member>
        <member name="M:Microsoft.Extensions.AI.SpeechToTextClientBuilderSpeechToTextClientExtensions.AsBuilder(Microsoft.Extensions.AI.ISpeechToTextClient)">
            <summary>Creates a new <see cref="T:Microsoft.Extensions.AI.SpeechToTextClientBuilder"/> using <paramref name="innerClient"/> as its inner client.</summary>
            <param name="innerClient">The client to use as the inner client.</param>
            <returns>The new <see cref="T:Microsoft.Extensions.AI.SpeechToTextClientBuilder"/> instance.</returns>
            <remarks>
            This method is equivalent to using the <see cref="T:Microsoft.Extensions.AI.SpeechToTextClientBuilder"/> constructor directly,
            specifying <paramref name="innerClient"/> as the inner client.
            </remarks>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.ChatClientBuilderServiceCollectionExtensions">
            <summary>Provides extension methods for registering <see cref="T:Microsoft.Extensions.AI.IChatClient"/> with a <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.</summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ChatClientBuilderServiceCollectionExtensions.AddChatClient(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.AI.IChatClient,Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>Registers a singleton <see cref="T:Microsoft.Extensions.AI.IChatClient"/> in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.</summary>
            <param name="serviceCollection">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> to which the client should be added.</param>
            <param name="innerClient">The inner <see cref="T:Microsoft.Extensions.AI.IChatClient"/> that represents the underlying backend.</param>
            <param name="lifetime">The service lifetime for the client. Defaults to <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton"/>.</param>
            <returns>A <see cref="T:Microsoft.Extensions.AI.ChatClientBuilder"/> that can be used to build a pipeline around the inner client.</returns>
            <remarks>The client is registered as a singleton service.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="serviceCollection"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="innerClient"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ChatClientBuilderServiceCollectionExtensions.AddChatClient(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,Microsoft.Extensions.AI.IChatClient},Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>Registers a singleton <see cref="T:Microsoft.Extensions.AI.IChatClient"/> in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.</summary>
            <param name="serviceCollection">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> to which the client should be added.</param>
            <param name="innerClientFactory">A callback that produces the inner <see cref="T:Microsoft.Extensions.AI.IChatClient"/> that represents the underlying backend.</param>
            <param name="lifetime">The service lifetime for the client. Defaults to <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton"/>.</param>
            <returns>A <see cref="T:Microsoft.Extensions.AI.ChatClientBuilder"/> that can be used to build a pipeline around the inner client.</returns>
            <remarks>The client is registered as a singleton service.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="serviceCollection"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="innerClientFactory"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ChatClientBuilderServiceCollectionExtensions.AddKeyedChatClient(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Object,Microsoft.Extensions.AI.IChatClient,Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>Registers a keyed singleton <see cref="T:Microsoft.Extensions.AI.IChatClient"/> in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.</summary>
            <param name="serviceCollection">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> to which the client should be added.</param>
            <param name="serviceKey">The key with which to associate the client.</param>
            <param name="innerClient">The inner <see cref="T:Microsoft.Extensions.AI.IChatClient"/> that represents the underlying backend.</param>
            <param name="lifetime">The service lifetime for the client. Defaults to <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton"/>.</param>
            <returns>A <see cref="T:Microsoft.Extensions.AI.ChatClientBuilder"/> that can be used to build a pipeline around the inner client.</returns>
            <remarks>The client is registered as a scoped service.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="serviceCollection"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="innerClient"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ChatClientBuilderServiceCollectionExtensions.AddKeyedChatClient(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Object,System.Func{System.IServiceProvider,Microsoft.Extensions.AI.IChatClient},Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>Registers a keyed singleton <see cref="T:Microsoft.Extensions.AI.IChatClient"/> in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.</summary>
            <param name="serviceCollection">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> to which the client should be added.</param>
            <param name="serviceKey">The key with which to associate the client.</param>
            <param name="innerClientFactory">A callback that produces the inner <see cref="T:Microsoft.Extensions.AI.IChatClient"/> that represents the underlying backend.</param>
            <param name="lifetime">The service lifetime for the client. Defaults to <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton"/>.</param>
            <returns>A <see cref="T:Microsoft.Extensions.AI.ChatClientBuilder"/> that can be used to build a pipeline around the inner client.</returns>
            <remarks>The client is registered as a scoped service.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="serviceCollection"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="innerClientFactory"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.EmbeddingGeneratorBuilderServiceCollectionExtensions">
            <summary>Provides extension methods for registering <see cref="T:Microsoft.Extensions.AI.IEmbeddingGenerator`2"/> with a <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.</summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.EmbeddingGeneratorBuilderServiceCollectionExtensions.AddEmbeddingGenerator``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.AI.IEmbeddingGenerator{``0,``1},Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>Registers a singleton embedding generator in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.</summary>
            <typeparam name="TInput">The type from which embeddings will be generated.</typeparam>
            <typeparam name="TEmbedding">The type of embeddings to generate.</typeparam>
            <param name="serviceCollection">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> to which the generator should be added.</param>
            <param name="innerGenerator">The inner <see cref="T:Microsoft.Extensions.AI.IEmbeddingGenerator`2"/> that represents the underlying backend.</param>
            <param name="lifetime">The service lifetime for the client. Defaults to <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton"/>.</param>
            <returns>An <see cref="T:Microsoft.Extensions.AI.EmbeddingGeneratorBuilder`2"/> that can be used to build a pipeline around the inner generator.</returns>
            <remarks>The generator is registered as a singleton service.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="serviceCollection"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="innerGenerator"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.EmbeddingGeneratorBuilderServiceCollectionExtensions.AddEmbeddingGenerator``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,Microsoft.Extensions.AI.IEmbeddingGenerator{``0,``1}},Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>Registers a singleton embedding generator in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.</summary>
            <typeparam name="TInput">The type from which embeddings will be generated.</typeparam>
            <typeparam name="TEmbedding">The type of embeddings to generate.</typeparam>
            <param name="serviceCollection">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> to which the generator should be added.</param>
            <param name="innerGeneratorFactory">A callback that produces the inner <see cref="T:Microsoft.Extensions.AI.IEmbeddingGenerator`2"/> that represents the underlying backend.</param>
            <param name="lifetime">The service lifetime for the client. Defaults to <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton"/>.</param>
            <returns>An <see cref="T:Microsoft.Extensions.AI.EmbeddingGeneratorBuilder`2"/> that can be used to build a pipeline around the inner generator.</returns>
            <remarks>The generator is registered as a singleton service.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="serviceCollection"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="innerGeneratorFactory"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.EmbeddingGeneratorBuilderServiceCollectionExtensions.AddKeyedEmbeddingGenerator``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Object,Microsoft.Extensions.AI.IEmbeddingGenerator{``0,``1},Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>Registers a keyed singleton embedding generator in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.</summary>
            <typeparam name="TInput">The type from which embeddings will be generated.</typeparam>
            <typeparam name="TEmbedding">The type of embeddings to generate.</typeparam>
            <param name="serviceCollection">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> to which the generator should be added.</param>
            <param name="serviceKey">The key with which to associated the generator.</param>
            <param name="innerGenerator">The inner <see cref="T:Microsoft.Extensions.AI.IEmbeddingGenerator`2"/> that represents the underlying backend.</param>
            <param name="lifetime">The service lifetime for the client. Defaults to <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton"/>.</param>
            <returns>An <see cref="T:Microsoft.Extensions.AI.EmbeddingGeneratorBuilder`2"/> that can be used to build a pipeline around the inner generator.</returns>
            <remarks>The generator is registered as a singleton service.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="serviceCollection"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="innerGenerator"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.EmbeddingGeneratorBuilderServiceCollectionExtensions.AddKeyedEmbeddingGenerator``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Object,System.Func{System.IServiceProvider,Microsoft.Extensions.AI.IEmbeddingGenerator{``0,``1}},Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>Registers a keyed singleton embedding generator in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.</summary>
            <typeparam name="TInput">The type from which embeddings will be generated.</typeparam>
            <typeparam name="TEmbedding">The type of embeddings to generate.</typeparam>
            <param name="serviceCollection">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> to which the generator should be added.</param>
            <param name="serviceKey">The key with which to associated the generator.</param>
            <param name="innerGeneratorFactory">A callback that produces the inner <see cref="T:Microsoft.Extensions.AI.IEmbeddingGenerator`2"/> that represents the underlying backend.</param>
            <param name="lifetime">The service lifetime for the client. Defaults to <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton"/>.</param>
            <returns>An <see cref="T:Microsoft.Extensions.AI.EmbeddingGeneratorBuilder`2"/> that can be used to build a pipeline around the inner generator.</returns>
            <remarks>The generator is registered as a singleton service.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="serviceCollection"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="innerGeneratorFactory"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.SpeechToTextClientBuilderServiceCollectionExtensions">
            <summary>Provides extension methods for registering <see cref="T:Microsoft.Extensions.AI.ISpeechToTextClient"/> with a <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.</summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SpeechToTextClientBuilderServiceCollectionExtensions.AddSpeechToTextClient(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.AI.ISpeechToTextClient,Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>Registers a singleton <see cref="T:Microsoft.Extensions.AI.ISpeechToTextClient"/> in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.</summary>
            <param name="serviceCollection">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> to which the client should be added.</param>
            <param name="innerClient">The inner <see cref="T:Microsoft.Extensions.AI.ISpeechToTextClient"/> that represents the underlying backend.</param>
            <param name="lifetime">The service lifetime for the client. Defaults to <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton"/>.</param>
            <returns>A <see cref="T:Microsoft.Extensions.AI.SpeechToTextClientBuilder"/> that can be used to build a pipeline around the inner client.</returns>
            <remarks>The client is registered as a singleton service.</remarks>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SpeechToTextClientBuilderServiceCollectionExtensions.AddSpeechToTextClient(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,Microsoft.Extensions.AI.ISpeechToTextClient},Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>Registers a singleton <see cref="T:Microsoft.Extensions.AI.ISpeechToTextClient"/> in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.</summary>
            <param name="serviceCollection">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> to which the client should be added.</param>
            <param name="innerClientFactory">A callback that produces the inner <see cref="T:Microsoft.Extensions.AI.ISpeechToTextClient"/> that represents the underlying backend.</param>
            <param name="lifetime">The service lifetime for the client. Defaults to <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton"/>.</param>
            <returns>A <see cref="T:Microsoft.Extensions.AI.SpeechToTextClientBuilder"/> that can be used to build a pipeline around the inner client.</returns>
            <remarks>The client is registered as a singleton service.</remarks>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SpeechToTextClientBuilderServiceCollectionExtensions.AddKeyedSpeechToTextClient(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Object,Microsoft.Extensions.AI.ISpeechToTextClient,Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>Registers a keyed singleton <see cref="T:Microsoft.Extensions.AI.ISpeechToTextClient"/> in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.</summary>
            <param name="serviceCollection">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> to which the client should be added.</param>
            <param name="serviceKey">The key with which to associate the client.</param>
            <param name="innerClient">The inner <see cref="T:Microsoft.Extensions.AI.ISpeechToTextClient"/> that represents the underlying backend.</param>
            <param name="lifetime">The service lifetime for the client. Defaults to <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton"/>.</param>
            <returns>A <see cref="T:Microsoft.Extensions.AI.SpeechToTextClientBuilder"/> that can be used to build a pipeline around the inner client.</returns>
            <remarks>The client is registered as a scoped service.</remarks>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SpeechToTextClientBuilderServiceCollectionExtensions.AddKeyedSpeechToTextClient(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Object,System.Func{System.IServiceProvider,Microsoft.Extensions.AI.ISpeechToTextClient},Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>Registers a keyed singleton <see cref="T:Microsoft.Extensions.AI.ISpeechToTextClient"/> in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.</summary>
            <param name="serviceCollection">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> to which the client should be added.</param>
            <param name="serviceKey">The key with which to associate the client.</param>
            <param name="innerClientFactory">A callback that produces the inner <see cref="T:Microsoft.Extensions.AI.ISpeechToTextClient"/> that represents the underlying backend.</param>
            <param name="lifetime">The service lifetime for the client. Defaults to <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton"/>.</param>
            <returns>A <see cref="T:Microsoft.Extensions.AI.SpeechToTextClientBuilder"/> that can be used to build a pipeline around the inner client.</returns>
            <remarks>The client is registered as a scoped service.</remarks>
        </member>
    </members>
</doc>
